{"translation": {"code": "private CloseableHttpClient getClient ( ) { if ( this . closeableHttpClient != null ) { return this . closeableHttpClient ; } //Only accept self signed certificate if in Junit test case. String pathToFluidTrustStore = this . getPathToFluidSpecificTrustStore ( ) ; //Test mode... if ( IS_IN_JUNIT_TEST_MODE || pathToFluidTrustStore != null ) { SSLContextBuilder builder = new SSLContextBuilder ( ) ; try { //builder.loadTrustMaterial(null, new TrustSelfSignedStrategy()); if ( pathToFluidTrustStore == null ) { builder . loadTrustMaterial ( new SSLTrustAll ( ) ) ; } else { String password = this . getFluidSpecificTrustStorePassword ( ) ; if ( password == null ) { password = UtilGlobal . EMPTY ; } if ( IS_IN_JUNIT_TEST_MODE ) { builder . loadTrustMaterial ( new File ( pathToFluidTrustStore ) , password . toCharArray ( ) , new SSLTrustAll ( ) ) ; } else { builder . loadTrustMaterial ( new File ( pathToFluidTrustStore ) , password . toCharArray ( ) ) ; } } SSLContext sslContext = builder . build ( ) ; this . closeableHttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( new SSLConnectionSocketFactory ( sslContext ) ) . build ( ) ; } catch ( NoSuchAlgorithmException e ) { //Changed for Java 1.6 compatibility... throw new FluidClientException ( \"NoSuchAlgorithm: Unable to load self signed trust material. \" + e . getMessage ( ) , e , FluidClientException . ErrorCode . CRYPTOGRAPHY ) ; } catch ( KeyManagementException e ) { throw new FluidClientException ( \"KeyManagement: Unable to load self signed trust material. \" + e . getMessage ( ) , e , FluidClientException . ErrorCode . CRYPTOGRAPHY ) ; } catch ( KeyStoreException e ) { throw new FluidClientException ( \"KeyStore: Unable to load self signed trust material. \" + e . getMessage ( ) , e , FluidClientException . ErrorCode . CRYPTOGRAPHY ) ; } catch ( CertificateException e ) { throw new FluidClientException ( \"Certificate: Unable to load self signed trust material. \" + e . getMessage ( ) , e , FluidClientException . ErrorCode . CRYPTOGRAPHY ) ; } catch ( IOException ioError ) { throw new FluidClientException ( \"IOError: Unable to load self signed trust material. \" + ioError . getMessage ( ) , ioError , FluidClientException . ErrorCode . CRYPTOGRAPHY ) ; } } else { //Default HTTP Client... this . closeableHttpClient = HttpClients . createDefault ( ) ; } return this . closeableHttpClient ; }", "nl": "Creates a new Http client ."}}
{"translation": {"code": "public boolean isConnectionValid ( ) { //Init the session to get the salt... try { this . getJson ( false , WS . Path . Test . Version1 . testConnection ( ) ) ; } catch ( FluidClientException flowJobExcept ) { //Connect problem... if ( flowJobExcept . getErrorCode ( ) == FluidClientException . ErrorCode . CONNECT_ERROR ) { return false ; } throw flowJobExcept ; } return true ; }", "nl": "Performs a HTTP Get against the connection test Web Service to confirm whether the connection is valid ."}}
{"translation": {"code": "protected JSONObject executeForm ( HttpMethod httpMethodParam , List < HeaderNameValue > headerNameValuesParam , boolean checkConnectionValidParam , List < FormNameValue > formNameValuesParam , ContentType contentTypeParam , String postfixUrlParam ) { //Validate Form Field and values... if ( formNameValuesParam == null || formNameValuesParam . isEmpty ( ) ) { throw new FluidClientException ( \"No 'Name and Value' body to post.\" , FluidClientException . ErrorCode . FIELD_VALIDATE ) ; } StringBuilder strBuilder = new StringBuilder ( ) ; for ( FormNameValue nameValue : formNameValuesParam ) { if ( nameValue . getName ( ) == null || nameValue . getName ( ) . trim ( ) . isEmpty ( ) ) { continue ; } if ( nameValue . getValue ( ) == null ) { continue ; } strBuilder . append ( nameValue . getName ( ) ) ; strBuilder . append ( EQUALS ) ; strBuilder . append ( nameValue . getValue ( ) ) ; strBuilder . append ( AMP ) ; } String bodyJsonString = strBuilder . toString ( ) ; bodyJsonString = bodyJsonString . substring ( 0 , bodyJsonString . length ( ) - 1 ) ; return this . executeString ( httpMethodParam , headerNameValuesParam , checkConnectionValidParam , bodyJsonString , contentTypeParam , postfixUrlParam ) ; }", "nl": "Submit a HTML Form based HTTP request body with JSON as a response ."}}
{"translation": {"code": "protected JSONObject executeJson ( HttpMethod httpMethodParam , List < HeaderNameValue > headerNameValuesParam , boolean checkConnectionValidParam , ABaseFluidJSONObject baseDomainParam , ContentType contentTypeParam , String postfixUrlParam ) { //Validate that something is set. if ( baseDomainParam == null ) { throw new FluidClientException ( \"No JSON body to post.\" , FluidClientException . ErrorCode . FIELD_VALIDATE ) ; } String bodyJsonString = baseDomainParam . toJsonObject ( ) . toString ( ) ; return this . executeString ( httpMethodParam , headerNameValuesParam , checkConnectionValidParam , bodyJsonString , contentTypeParam , postfixUrlParam ) ; }", "nl": "Submit a JSON based HTTP request body with JSON as a response ."}}
{"translation": {"code": "@ XmlTransient public String getElasticSearchFieldType ( ) { Type fieldType = this . getTypeAsEnum ( ) ; if ( fieldType == null ) { return null ; } //Get the fieldType by Fluid field fieldType... switch ( fieldType ) { case ParagraphText : return ElasticSearchType . TEXT ; case Text : String metaData = this . getTypeMetaData ( ) ; if ( metaData == null || metaData . isEmpty ( ) ) { return ElasticSearchType . TEXT ; } if ( LATITUDE_AND_LONGITUDE . equals ( metaData ) ) { return ElasticSearchType . GEO_POINT ; } return ElasticSearchType . TEXT ; case TrueFalse : return ElasticSearchType . BOOLEAN ; case DateTime : return ElasticSearchType . DATE ; case Decimal : return ElasticSearchType . DOUBLE ; case MultipleChoice : return ElasticSearchType . KEYWORD ; } return null ; }", "nl": "Returns the ElasticSearch equivalent data field - type from the Fluid datatype ."}}
{"translation": {"code": "public Field createFieldValue ( Field routeFieldValueToCreateParam , FluidItem fluidItemParam ) { if ( routeFieldValueToCreateParam != null && this . serviceTicket != null ) { routeFieldValueToCreateParam . setServiceTicket ( this . serviceTicket ) ; } Long fluidItmId = ( fluidItemParam == null ) ? null : fluidItemParam . getId ( ) ; return new Field ( this . putJson ( routeFieldValueToCreateParam , Version1 . routeFieldCreateValue ( fluidItmId ) ) ) ; }", "nl": "Create an new Route field value ."}}
{"translation": {"code": "public Field updateFieldDateTimeDateAndTime ( Field routeFieldParam ) { if ( routeFieldParam != null && this . serviceTicket != null ) { routeFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( routeFieldParam != null ) { routeFieldParam . setTypeAsEnum ( Field . Type . DateTime ) ; routeFieldParam . setTypeMetaData ( FieldMetaData . DateTime . DATE_AND_TIME ) ; } return new Field ( this . postJson ( routeFieldParam , Version1 . routeFieldUpdate ( ) ) ) ; }", "nl": "Update an existing Date and Time field ."}}
{"translation": {"code": "public Field updateFieldParagraphTextHTML ( Field routeFieldParam ) { if ( routeFieldParam != null && this . serviceTicket != null ) { routeFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( routeFieldParam != null ) { routeFieldParam . setTypeAsEnum ( Field . Type . ParagraphText ) ; routeFieldParam . setTypeMetaData ( FieldMetaData . ParagraphText . HTML ) ; } return new Field ( this . postJson ( routeFieldParam , Version1 . routeFieldUpdate ( ) ) ) ; }", "nl": "Update an existing Paragraph HTML field ."}}
{"translation": {"code": "public Field updateFieldTextPlain ( Field routeFieldParam ) { if ( routeFieldParam != null && this . serviceTicket != null ) { routeFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( routeFieldParam != null ) { routeFieldParam . setTypeAsEnum ( Field . Type . Text ) ; routeFieldParam . setTypeMetaData ( FieldMetaData . Text . PLAIN ) ; } return new Field ( this . postJson ( routeFieldParam , Version1 . routeFieldUpdate ( ) ) ) ; }", "nl": "Update an existing Text field ."}}
{"translation": {"code": "public void closeSession ( ) { if ( this . userSession == null ) { return ; } try { this . userSession . close ( ) ; } catch ( IOException e ) { throw new FluidClientException ( \"Unable to close session. \" + e . getMessage ( ) , e , FluidClientException . ErrorCode . IO_ERROR ) ; } }", "nl": "Closes the Web Socket User session ."}}
{"translation": {"code": "public void sendMessage ( String messageToSendParam ) { if ( this . userSession == null ) { throw new FluidClientException ( \"User Session is not set. Check if connection is open.\" , FluidClientException . ErrorCode . IO_ERROR ) ; } RemoteEndpoint . Async asyncRemote = null ; if ( ( asyncRemote = this . userSession . getAsyncRemote ( ) ) == null ) { throw new FluidClientException ( \"Remote Session is not set. Check if connection is open.\" , FluidClientException . ErrorCode . IO_ERROR ) ; } asyncRemote . sendText ( messageToSendParam ) ; }", "nl": "Send a message as text ."}}
{"translation": {"code": "public void sendMessage ( ABaseFluidJSONObject aBaseFluidJSONObjectParam ) { if ( aBaseFluidJSONObjectParam == null ) { throw new FluidClientException ( \"No JSON Object to send.\" , FluidClientException . ErrorCode . IO_ERROR ) ; } else { this . sendMessage ( aBaseFluidJSONObjectParam . toJsonObject ( ) . toString ( ) ) ; } }", "nl": "Send a message ."}}
{"translation": {"code": "@ OnClose public void onClose ( Session userSessionParam , CloseReason reasonParam ) { this . userSession = null ; if ( this . messageHandlers != null ) { this . messageHandlers . values ( ) . forEach ( handle -> { handle . connectionClosed ( ) ; } ) ; } }", "nl": "Callback hook for Connection close events ."}}