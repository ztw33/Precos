{"translation": {"code": "public Field createFieldTable ( Field formFieldParam , Form formDefinitionParam , boolean sumDecimalsParam ) { if ( formFieldParam != null && this . serviceTicket != null ) { formFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( formFieldParam != null ) { formFieldParam . setTypeAsEnum ( Field . Type . Table ) ; formFieldParam . setTypeMetaData ( this . getMetaDataForTableField ( formDefinitionParam , sumDecimalsParam ) ) ; } return new Field ( this . putJson ( formFieldParam , WS . Path . FormField . Version1 . formFieldCreate ( ) ) ) ; }", "nl": "Creates a new Table Field ."}}
{"translation": {"code": "public AccessToken getAccessToken ( String clientIdParam , String clientSecretParam , String codeParam , String redirectUrlParam ) { if ( clientIdParam == null || clientIdParam . trim ( ) . isEmpty ( ) ) { throw new FluidClientException ( \"Client Id must be provided.\" , FluidClientException . ErrorCode . FIELD_VALIDATE ) ; } if ( clientSecretParam == null || clientSecretParam . trim ( ) . isEmpty ( ) ) { throw new FluidClientException ( \"Client Secret must be provided.\" , FluidClientException . ErrorCode . FIELD_VALIDATE ) ; } if ( codeParam == null || codeParam . trim ( ) . isEmpty ( ) ) { throw new FluidClientException ( \"Code must be provided.\" , FluidClientException . ErrorCode . FIELD_VALIDATE ) ; } AccessTokenRequest tokenRequest = new AccessTokenRequest ( ) ; tokenRequest . setClientId ( clientIdParam ) ; tokenRequest . setClientSecret ( clientSecretParam ) ; tokenRequest . setGrantType ( AUTHORIZATION_CODE ) ; tokenRequest . setCode ( codeParam ) ; tokenRequest . setRedirectUri ( redirectUrlParam ) ; return new AccessToken ( this . postJson ( false , tokenRequest , WS . Path . Auth0 . Version1 . userToken ( ) ) ) ; }", "nl": "Gets a Access Token from Auth0 ."}}
{"translation": {"code": "public Flow createFlow ( Flow flowParam ) { if ( flowParam != null && this . serviceTicket != null ) { flowParam . setServiceTicket ( this . serviceTicket ) ; } return new Flow ( this . putJson ( flowParam , WS . Path . Flow . Version1 . flowCreate ( ) ) ) ; }", "nl": "Creates a new Flow with an Introduction and Exit basic rule ."}}
{"translation": {"code": "public static byte [ ] decryptInitPacket ( byte [ ] encryptedDataParam , String passwordParam , String saltParam , byte [ ] ivParam , byte [ ] seedParam ) { //Stored like this in the database, so we have to get the password as stored in the database so that the // SHa256 and SALT combination will be valid... byte [ ] passwordSha256 = sha256 ( passwordParam . concat ( saltParam ) . getBytes ( ) ) ; //Add the seed to the password and SHA-256... byte [ ] derivedKey = sha256 ( UtilGlobal . addAll ( passwordSha256 , seedParam ) ) ; //Decrypt with the derived key. return decrypt ( derivedKey , encryptedDataParam , ivParam ) ; }", "nl": "Decrypts the encrypted data ."}}
{"translation": {"code": "public Flow forceDeleteFlow ( Flow flowParam ) { if ( flowParam != null && this . serviceTicket != null ) { flowParam . setServiceTicket ( this . serviceTicket ) ; } return new Flow ( this . postJson ( flowParam , WS . Path . Flow . Version1 . flowDelete ( true ) ) ) ; }", "nl": "Forcefully Delete an existing Flow ."}}
{"translation": {"code": "public FlowStepRule createFlowStepEntryRule ( FlowStepRule flowStepRuleParam ) { if ( flowStepRuleParam != null && this . serviceTicket != null ) { flowStepRuleParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStepRule ( this . putJson ( flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleEntryCreate ( ) ) ) ; }", "nl": "Create a new Flow Step Entry rule ."}}
{"translation": {"code": "public FlowStepRule createFlowStepExitRule ( FlowStepRule flowStepRuleParam ) { if ( flowStepRuleParam != null && this . serviceTicket != null ) { flowStepRuleParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStepRule ( this . putJson ( flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleExitCreate ( ) ) ) ; }", "nl": "Create a new Flow Step Exit rule ."}}
{"translation": {"code": "public FlowStepRule createFlowStepViewRule ( FlowStepRule flowStepRuleParam ) { if ( flowStepRuleParam != null && this . serviceTicket != null ) { flowStepRuleParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStepRule ( this . putJson ( flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleViewCreate ( ) ) ) ; }", "nl": "Create a new Flow Step View rule ."}}
{"translation": {"code": "public FlowStepRule updateFlowStepEntryRule ( FlowStepRule flowStepRuleParam ) { if ( flowStepRuleParam != null && this . serviceTicket != null ) { flowStepRuleParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStepRule ( this . postJson ( flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleUpdateEntry ( ) ) ) ; }", "nl": "Update an existing Flow Step Entry rule ."}}
{"translation": {"code": "public FlowStepRule updateFlowStepExitRule ( FlowStepRule flowStepRuleParam ) { if ( flowStepRuleParam != null && this . serviceTicket != null ) { flowStepRuleParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStepRule ( this . postJson ( flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleUpdateExit ( ) ) ) ; }", "nl": "Update an existing Flow Step Exit rule ."}}
{"translation": {"code": "public FlowStepRule updateFlowStepViewRule ( FlowStepRule flowStepRuleParam ) { if ( flowStepRuleParam != null && this . serviceTicket != null ) { flowStepRuleParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStepRule ( this . postJson ( flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleUpdateView ( ) ) ) ; }", "nl": "Update an existing Flow Step View rule ."}}
{"translation": {"code": "public FlowStepRule deleteFlowStepEntryRule ( FlowStepRule flowStepRuleParam ) { if ( flowStepRuleParam != null && this . serviceTicket != null ) { flowStepRuleParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStepRule ( this . postJson ( flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleDeleteEntry ( ) ) ) ; }", "nl": "Deletes an Step Entry rule ."}}
{"translation": {"code": "public FlowStep deleteFlowStepExitRule ( FlowStepRule flowStepRuleParam ) { if ( flowStepRuleParam != null && this . serviceTicket != null ) { flowStepRuleParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStep ( this . postJson ( flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleDeleteExit ( ) ) ) ; }", "nl": "Deletes an Step Exit rule ."}}
{"translation": {"code": "public FlowStep deleteFlowStepViewRule ( FlowStepRule flowStepRuleParam ) { if ( flowStepRuleParam != null && this . serviceTicket != null ) { flowStepRuleParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStep ( this . postJson ( flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleDeleteView ( ) ) ) ; }", "nl": "Deletes an Step View rule ."}}
{"translation": {"code": "private AuthEncryptedData initializeSession ( String passwordParam , AuthResponse authResponseParam ) { //IV... byte [ ] ivBytes = UtilGlobal . decodeBase64 ( authResponseParam . getIvBase64 ( ) ) ; //Seed... byte [ ] seedBytes = UtilGlobal . decodeBase64 ( authResponseParam . getSeedBase64 ( ) ) ; //Encrypted Data... byte [ ] encryptedData = UtilGlobal . decodeBase64 ( authResponseParam . getEncryptedDataBase64 ( ) ) ; //HMac from Response... byte [ ] hMacFromResponse = UtilGlobal . decodeBase64 ( authResponseParam . getEncryptedDataHmacBase64 ( ) ) ; //Local HMac... byte [ ] localGeneratedHMac = AES256Local . generateLocalHMAC ( encryptedData , passwordParam , authResponseParam . getSalt ( ) , seedBytes ) ; //Password mismatch... if ( ! Arrays . equals ( hMacFromResponse , localGeneratedHMac ) ) { throw new FluidClientException ( \"Login attempt failure.\" , FluidClientException . ErrorCode . LOGIN_FAILURE ) ; } //Decrypted Initialization Data... byte [ ] decryptedEncryptedData = AES256Local . decryptInitPacket ( encryptedData , passwordParam , authResponseParam . getSalt ( ) , ivBytes , seedBytes ) ; try { JSONObject jsonObj = new JSONObject ( new String ( decryptedEncryptedData ) ) ; return new AuthEncryptedData ( jsonObj ) ; } catch ( JSONException jsonExcept ) { throw new FluidClientException ( jsonExcept . getMessage ( ) , FluidClientException . ErrorCode . JSON_PARSING ) ; } }", "nl": "Performs HMAC and encryption to initialize the session ."}}
{"translation": {"code": "public Field createFieldTextMasked ( Field formFieldParam , String maskValueParam ) { if ( formFieldParam != null && this . serviceTicket != null ) { formFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( maskValueParam == null || maskValueParam . trim ( ) . isEmpty ( ) ) { maskValueParam = \"\" ; } if ( formFieldParam != null ) { formFieldParam . setTypeAsEnum ( Field . Type . Text ) ; formFieldParam . setTypeMetaData ( FieldMetaData . Text . MASKED . concat ( maskValueParam ) ) ; } return new Field ( this . putJson ( formFieldParam , WS . Path . FormField . Version1 . formFieldCreate ( ) ) ) ; }", "nl": "Create a new Text Masked field ."}}
{"translation": {"code": "public Field createFieldTextBarcode ( Field formFieldParam , String barcodeTypeParam ) { if ( formFieldParam != null && this . serviceTicket != null ) { formFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( barcodeTypeParam == null || barcodeTypeParam . trim ( ) . isEmpty ( ) ) { throw new FluidClientException ( \"Barcode type cannot be empty.\" , FluidClientException . ErrorCode . FIELD_VALIDATE ) ; } if ( formFieldParam != null ) { formFieldParam . setTypeAsEnum ( Field . Type . Text ) ; formFieldParam . setTypeMetaData ( FieldMetaData . Text . BARCODE . concat ( barcodeTypeParam ) ) ; } return new Field ( this . putJson ( formFieldParam , WS . Path . FormField . Version1 . formFieldCreate ( ) ) ) ; }", "nl": "Create a new Text Barcode field ."}}
{"translation": {"code": "public Field createFieldDecimalSpinner ( Field formFieldParam , double minParam , double maxParam , double stepFactorParam , String prefixParam ) { if ( formFieldParam != null && this . serviceTicket != null ) { formFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( formFieldParam != null ) { formFieldParam . setTypeAsEnum ( Field . Type . Decimal ) ; formFieldParam . setTypeMetaData ( this . getMetaDataForDecimalAs ( FieldMetaData . Decimal . SPINNER , minParam , maxParam , stepFactorParam , prefixParam ) ) ; } return new Field ( this . putJson ( formFieldParam , WS . Path . FormField . Version1 . formFieldCreate ( ) ) ) ; }", "nl": "Create a new Decimal Spinner field ."}}
{"translation": {"code": "public Field createFieldDecimalSlider ( Field formFieldParam , double minParam , double maxParam , double stepFactorParam ) { if ( formFieldParam != null && this . serviceTicket != null ) { formFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( formFieldParam != null ) { formFieldParam . setTypeAsEnum ( Field . Type . Decimal ) ; formFieldParam . setTypeMetaData ( this . getMetaDataForDecimalAs ( FieldMetaData . Decimal . SLIDER , minParam , maxParam , stepFactorParam , null ) ) ; } return new Field ( this . putJson ( formFieldParam , WS . Path . FormField . Version1 . formFieldCreate ( ) ) ) ; }", "nl": "Create a new Decimal Slider field ."}}
{"translation": {"code": "public Flow deleteFlow ( Flow flowParam ) { if ( flowParam != null && this . serviceTicket != null ) { flowParam . setServiceTicket ( this . serviceTicket ) ; } return new Flow ( this . postJson ( flowParam , WS . Path . Flow . Version1 . flowDelete ( ) ) ) ; }", "nl": "Delete an existing Flow ."}}
{"translation": {"code": "public Field updateFieldTextMasked ( Field formFieldParam , String maskValueParam ) { if ( formFieldParam != null && this . serviceTicket != null ) { formFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( maskValueParam == null || maskValueParam . trim ( ) . isEmpty ( ) ) { throw new FluidClientException ( \"Masked value cannot be empty.\" , FluidClientException . ErrorCode . FIELD_VALIDATE ) ; } if ( formFieldParam != null ) { formFieldParam . setTypeAsEnum ( Field . Type . Text ) ; formFieldParam . setTypeMetaData ( FieldMetaData . Text . MASKED . concat ( maskValueParam ) ) ; } return new Field ( this . postJson ( formFieldParam , WS . Path . FormField . Version1 . formFieldUpdate ( ) ) ) ; }", "nl": "Update an existing Masked Text field ."}}
{"translation": {"code": "public Field updateFieldTextBarcode ( Field formFieldParam , String barcodeTypeParam ) { if ( formFieldParam != null && this . serviceTicket != null ) { formFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( barcodeTypeParam == null || barcodeTypeParam . trim ( ) . isEmpty ( ) ) { throw new FluidClientException ( \"Barcode type cannot be empty.\" , FluidClientException . ErrorCode . FIELD_VALIDATE ) ; } if ( formFieldParam != null ) { formFieldParam . setTypeAsEnum ( Field . Type . Text ) ; formFieldParam . setTypeMetaData ( FieldMetaData . Text . BARCODE . concat ( barcodeTypeParam ) ) ; } return new Field ( this . postJson ( formFieldParam , WS . Path . FormField . Version1 . formFieldUpdate ( ) ) ) ; }", "nl": "Update an existing Barcode Text field ."}}
{"translation": {"code": "public Field updateFieldDecimalSpinner ( Field formFieldParam , double minParam , double maxParam , double stepFactorParam , String prefixParam ) { if ( formFieldParam != null && this . serviceTicket != null ) { formFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( formFieldParam != null ) { formFieldParam . setTypeAsEnum ( Field . Type . Decimal ) ; formFieldParam . setTypeMetaData ( this . getMetaDataForDecimalAs ( FieldMetaData . Decimal . SPINNER , minParam , maxParam , stepFactorParam , prefixParam ) ) ; } return new Field ( this . postJson ( formFieldParam , WS . Path . FormField . Version1 . formFieldUpdate ( ) ) ) ; }", "nl": "Updates the Decimal Spinner field ."}}
{"translation": {"code": "public Field updateFieldDecimalSlider ( Field formFieldParam , double minParam , double maxParam , double stepFactorParam ) { if ( formFieldParam != null && this . serviceTicket != null ) { formFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( formFieldParam != null ) { formFieldParam . setTypeAsEnum ( Field . Type . Decimal ) ; formFieldParam . setTypeMetaData ( this . getMetaDataForDecimalAs ( FieldMetaData . Decimal . SLIDER , minParam , maxParam , stepFactorParam , null ) ) ; } return new Field ( this . postJson ( formFieldParam , WS . Path . FormField . Version1 . formFieldUpdate ( ) ) ) ; }", "nl": "Updates the Decimal Slider field ."}}
{"translation": {"code": "public Field updateFieldTable ( Field formFieldParam , Form formDefinitionParam , boolean sumDecimalsParam ) { if ( formFieldParam != null && this . serviceTicket != null ) { formFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( formFieldParam != null ) { formFieldParam . setTypeAsEnum ( Field . Type . Table ) ; formFieldParam . setTypeMetaData ( this . getMetaDataForTableField ( formDefinitionParam , sumDecimalsParam ) ) ; } return new Field ( this . postJson ( formFieldParam , WS . Path . FormField . Version1 . formFieldUpdate ( ) ) ) ; }", "nl": "Updates a Table Field ."}}
{"translation": {"code": "public Field getFieldByName ( String fieldNameParam ) { Field field = new Field ( ) ; field . setFieldName ( fieldNameParam ) ; if ( this . serviceTicket != null ) { field . setServiceTicket ( this . serviceTicket ) ; } return new Field ( this . postJson ( field , WS . Path . FormField . Version1 . getByName ( ) ) ) ; }", "nl": "Retrieve a Form Field via name ."}}
{"translation": {"code": "public Field deleteField ( Field fieldParam ) { if ( fieldParam != null && this . serviceTicket != null ) { fieldParam . setServiceTicket ( this . serviceTicket ) ; } return new Field ( this . postJson ( fieldParam , WS . Path . FormField . Version1 . formFieldDelete ( ) ) ) ; }", "nl": "Deletes the provided field ."}}
{"translation": {"code": "public Field forceDeleteField ( Field fieldParam ) { if ( fieldParam != null && this . serviceTicket != null ) { fieldParam . setServiceTicket ( this . serviceTicket ) ; } return new Field ( this . postJson ( fieldParam , WS . Path . FormField . Version1 . formFieldDelete ( true ) ) ) ; }", "nl": "Forcefully deletes the provided field ."}}
{"translation": {"code": "private String getMetaDataForTableField ( Form formDefinitionParam , boolean sumDecimalsParam ) { StringBuilder returnBuffer = new StringBuilder ( ) ; Long definitionId = ( formDefinitionParam == null ) ? - 1L : formDefinitionParam . getId ( ) ; //Min... returnBuffer . append ( definitionId ) ; returnBuffer . append ( FieldMetaData . TableField . UNDERSCORE ) ; returnBuffer . append ( FieldMetaData . TableField . SUM_DECIMALS ) ; returnBuffer . append ( FieldMetaData . Decimal . SQ_OPEN ) ; returnBuffer . append ( sumDecimalsParam ) ; returnBuffer . append ( FieldMetaData . Decimal . SQ_CLOSE ) ; return returnBuffer . toString ( ) ; }", "nl": "Generates the Meta Data for a table field ."}}
{"translation": {"code": "public Flow getFlowById ( Long flowIdParam ) { Flow flow = new Flow ( flowIdParam ) ; if ( this . serviceTicket != null ) { flow . setServiceTicket ( this . serviceTicket ) ; } return new Flow ( this . postJson ( flow , WS . Path . Flow . Version1 . getById ( ) ) ) ; }", "nl": "Retrieves a Flow by Primary Key ."}}
{"translation": {"code": "public Form deleteFormDefinition ( Form formDefinitionParam ) { if ( formDefinitionParam != null && this . serviceTicket != null ) { formDefinitionParam . setServiceTicket ( this . serviceTicket ) ; } return new Form ( this . postJson ( formDefinitionParam , WS . Path . FormDefinition . Version1 . formDefinitionDelete ( ) ) ) ; }", "nl": "Deletes the Form Definition provided . Id must be set on the Form Definition ."}}
{"translation": {"code": "public Form getFormDefinitionById ( Long formDefinitionIdParam ) { Form form = new Form ( formDefinitionIdParam ) ; if ( this . serviceTicket != null ) { form . setServiceTicket ( this . serviceTicket ) ; } return new Form ( this . postJson ( form , WS . Path . FormDefinition . Version1 . getById ( ) ) ) ; }", "nl": "Retrieves the Form Definition by Primary key ."}}
{"translation": {"code": "public Flow updateFlow ( Flow flowParam ) { if ( flowParam != null && this . serviceTicket != null ) { flowParam . setServiceTicket ( this . serviceTicket ) ; } return new Flow ( this . postJson ( flowParam , WS . Path . Flow . Version1 . flowUpdate ( ) ) ) ; }", "nl": "Updates an existing Flow ."}}
{"translation": {"code": "public Form createFormDefinition ( Form formDefinitionParam ) { if ( formDefinitionParam != null && this . serviceTicket != null ) { formDefinitionParam . setServiceTicket ( this . serviceTicket ) ; } return new Form ( this . putJson ( formDefinitionParam , WS . Path . FormDefinition . Version1 . formDefinitionCreate ( ) ) ) ; }", "nl": "Creates a new Form Definition with the Fields inside the definition ."}}
{"translation": {"code": "public List < FormFlowHistoricData > getFormFlowHistoricData ( Form formParam ) { if ( formParam != null && this . serviceTicket != null ) { formParam . setServiceTicket ( this . serviceTicket ) ; } return new FormFlowHistoricDataListing ( this . postJson ( formParam , WS . Path . FlowItemHistory . Version1 . getByFormContainer ( ) ) ) . getListing ( ) ; }", "nl": "Retrieves Electronic Form Workflow historic information ."}}
{"translation": {"code": "public List < FormHistoricData > getFormAndFieldHistoricData ( Form formParam , boolean includeCurrentParam ) { if ( formParam != null && this . serviceTicket != null ) { formParam . setServiceTicket ( this . serviceTicket ) ; } return new FormHistoricDataListing ( this . postJson ( formParam , WS . Path . FormHistory . Version1 . getByFormContainer ( includeCurrentParam ) ) ) . getListing ( ) ; }", "nl": "Retrieves Electronic Form and Field historic information ."}}
{"translation": {"code": "public FlowStep forceDeleteFlowStep ( FlowStep flowStepParam ) { if ( flowStepParam != null && this . serviceTicket != null ) { flowStepParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStep ( this . postJson ( flowStepParam , WS . Path . FlowStep . Version1 . flowStepDelete ( true ) ) ) ; }", "nl": "Forcefully delete an existing Flow Step ."}}
{"translation": {"code": "public Form updateFormDefinition ( Form formDefinitionParam ) { if ( formDefinitionParam != null && this . serviceTicket != null ) { formDefinitionParam . setServiceTicket ( this . serviceTicket ) ; } return new Form ( this . postJson ( formDefinitionParam , WS . Path . FormDefinition . Version1 . formDefinitionUpdate ( ) ) ) ; }", "nl": "Updates an existing Form Definition with the Fields inside the definition ."}}
{"translation": {"code": "public FlowStep updateFlowStep ( FlowStep flowStepParam ) { if ( flowStepParam != null && this . serviceTicket != null ) { flowStepParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStep ( this . postJson ( flowStepParam , WS . Path . FlowStep . Version1 . flowStepUpdate ( ) ) ) ; }", "nl": "Updates an existing Flow Step ."}}
{"translation": {"code": "public FlowStep deleteFlowStep ( FlowStep flowStepParam ) { if ( flowStepParam != null && this . serviceTicket != null ) { flowStepParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStep ( this . postJson ( flowStepParam , WS . Path . FlowStep . Version1 . flowStepDelete ( ) ) ) ; }", "nl": "Delete an existing Flow Step ."}}
{"translation": {"code": "public NormalizedUserProfile getUserProfileInfo ( AccessToken accessTokenParam ) { if ( accessTokenParam == null || ( accessTokenParam . getAccessToken ( ) == null || accessTokenParam . getAccessToken ( ) . trim ( ) . isEmpty ( ) ) ) { throw new FluidClientException ( \"Code must be provided.\" , FluidClientException . ErrorCode . FIELD_VALIDATE ) ; } try { String accessToken = accessTokenParam . getAccessToken ( ) ; List < HeaderNameValue > headerListing = new ArrayList < HeaderNameValue > ( ) ; headerListing . add ( new HeaderNameValue ( NormalizedUserProfile . HeaderMapping . AUTHORIZATION , \"Bearer \" + accessToken ) ) ; return new NormalizedUserProfile ( this . getJson ( true , WS . Path . Auth0 . Version1 . userInfo ( ) , headerListing ) ) ; } // catch ( UnsupportedEncodingException e ) { throw new FluidClientException ( \"Unable to Encode (Not Supported). \" + e . getMessage ( ) , FluidClientException . ErrorCode . ILLEGAL_STATE_ERROR ) ; } }", "nl": "Gets Auth0 Normalized User Profile info ."}}
{"translation": {"code": "public UserListing getAllUsers ( ) { UserListing userToGetInfoFor = new UserListing ( ) ; if ( this . serviceTicket != null ) { userToGetInfoFor . setServiceTicket ( this . serviceTicket ) ; } try { return new UserListing ( this . postJson ( userToGetInfoFor , WS . Path . User . Version1 . getAllUsers ( ) ) ) ; } // catch ( JSONException jsonExcept ) { throw new FluidClientException ( jsonExcept . getMessage ( ) , FluidClientException . ErrorCode . JSON_PARSING ) ; } }", "nl": "Retrieves all user information ."}}
{"translation": {"code": "public FlowStep createFlowStep ( FlowStep flowStepParam ) { if ( flowStepParam != null && this . serviceTicket != null ) { flowStepParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStep ( this . putJson ( flowStepParam , WS . Path . FlowStep . Version1 . flowStepCreate ( ) ) ) ; }", "nl": "Creates a new Flow Step ."}}
{"translation": {"code": "public FlowStep getFlowStepById ( Long flowStepIdParam , String flowStepTypeParam ) { FlowStep flowStep = new FlowStep ( flowStepIdParam ) ; flowStep . setFlowStepType ( flowStepTypeParam ) ; if ( this . serviceTicket != null ) { flowStep . setServiceTicket ( this . serviceTicket ) ; } return new FlowStep ( this . postJson ( flowStep , WS . Path . FlowStep . Version1 . getById ( ) ) ) ; }", "nl": "Retrieves an existing Flow Step via Primary key ."}}
{"translation": {"code": "public FlowStepListing getStepsByFlow ( Flow flowParam ) { if ( this . serviceTicket != null && flowParam != null ) { flowParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStepListing ( this . postJson ( flowParam , WS . Path . FlowStep . Version1 . getAllStepsByFlow ( ) ) ) ; }", "nl": "Retrieves all Steps via Flow ."}}
{"translation": {"code": "public FlowStepRule moveFlowStepEntryRuleUp ( FlowStepRule flowStepRuleParam ) { if ( flowStepRuleParam != null && this . serviceTicket != null ) { flowStepRuleParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStepRule ( this . postJson ( flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleMoveEntryUp ( ) ) ) ; }", "nl": "Moves an entry rule order one up from the current location ."}}
{"translation": {"code": "public FlowStepRule moveFlowStepEntryRuleDown ( FlowStepRule flowStepRuleParam ) { if ( flowStepRuleParam != null && this . serviceTicket != null ) { flowStepRuleParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStepRule ( this . postJson ( flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleMoveEntryDown ( ) ) ) ; }", "nl": "Moves an entry rule order one down from the current location ."}}
{"translation": {"code": "public Form deleteFormContainer ( Form formContainerParam ) { if ( formContainerParam != null && this . serviceTicket != null ) { formContainerParam . setServiceTicket ( this . serviceTicket ) ; } return new Form ( this . postJson ( formContainerParam , WS . Path . FormContainer . Version1 . formContainerDelete ( ) ) ) ; }", "nl": "Deletes the Form Container provided . Id must be set on the Form Container ."}}
{"translation": {"code": "public TableRecord createTableRecord ( TableRecord tableRecordParam ) { if ( tableRecordParam != null && this . serviceTicket != null ) { tableRecordParam . setServiceTicket ( this . serviceTicket ) ; } return new TableRecord ( this . putJson ( tableRecordParam , WS . Path . FormContainerTableRecord . Version1 . formContainerTableRecordCreate ( ) ) ) ; }", "nl": "Create a new Table Record ."}}
{"translation": {"code": "public Configuration getConfigurationByKey ( String configurationKeyParam ) { Configuration configuration = new Configuration ( ) ; configuration . setKey ( configurationKeyParam ) ; if ( this . serviceTicket != null ) { configuration . setServiceTicket ( this . serviceTicket ) ; } return new Configuration ( this . postJson ( configuration , WS . Path . Configuration . Version1 . getByKey ( ) ) ) ; }", "nl": "Retrieves a Configuration by Key ."}}
{"translation": {"code": "public ConfigurationListing getAllConfigurations ( ) { Configuration configuration = new Configuration ( ) ; if ( this . serviceTicket != null ) { configuration . setServiceTicket ( this . serviceTicket ) ; } return new ConfigurationListing ( this . postJson ( configuration , WS . Path . Configuration . Version1 . getAllConfigurations ( ) ) ) ; }", "nl": "Retrieves all Configurations ."}}
{"translation": {"code": "public RoleListing getAllRoles ( ) { RoleListing roleToGetInfoFor = new RoleListing ( ) ; if ( this . serviceTicket != null ) { roleToGetInfoFor . setServiceTicket ( this . serviceTicket ) ; } try { return new RoleListing ( this . postJson ( roleToGetInfoFor , WS . Path . Role . Version1 . getAllRoles ( ) ) ) ; } // catch ( JSONException jsonExcept ) { throw new FluidClientException ( jsonExcept . getMessage ( ) , FluidClientException . ErrorCode . JSON_PARSING ) ; } }", "nl": "Retrieves all role information ."}}
{"translation": {"code": "@ Override public void handleMessage ( Object objectToProcess ) { //There is an error... if ( objectToProcess instanceof Error ) { Error fluidError = ( ( Error ) objectToProcess ) ; this . errors . add ( fluidError ) ; //Do a message callback... if ( this . messageReceivedCallback != null ) { this . messageReceivedCallback . errorMessageReceived ( fluidError ) ; } //If complete future is provided... if ( this . completableFuture != null ) { this . completableFuture . completeExceptionally ( new FluidClientException ( fluidError . getErrorMessage ( ) , fluidError . getErrorCode ( ) ) ) ; } } //No Error... else { JSONObject jsonObject = ( JSONObject ) objectToProcess ; //Uncompress the compressed response... if ( this . compressedResponse ) { CompressedResponse compressedResponse = new CompressedResponse ( jsonObject ) ; byte [ ] compressedJsonList = UtilGlobal . decodeBase64 ( compressedResponse . getDataBase64 ( ) ) ; byte [ ] uncompressedJson = null ; try { uncompressedJson = this . uncompress ( compressedJsonList ) ; } catch ( IOException eParam ) { throw new FluidClientException ( \"I/O issue with uncompress. \" + eParam . getMessage ( ) , eParam , FluidClientException . ErrorCode . IO_ERROR ) ; } jsonObject = new JSONObject ( new String ( uncompressedJson ) ) ; } T messageForm = this . getNewInstanceBy ( jsonObject ) ; //Add to the list of return values... this . returnValue . add ( messageForm ) ; //Completable future is set, and all response messages received... if ( this . completableFuture != null ) { String echo = messageForm . getEcho ( ) ; if ( echo != null && ! echo . trim ( ) . isEmpty ( ) ) { this . expectedEchoMessagesBeforeComplete . remove ( echo ) ; } //All expected messages received... if ( this . expectedEchoMessagesBeforeComplete . isEmpty ( ) ) { this . completableFuture . complete ( this . returnValue ) ; } } //Do a message callback... if ( this . messageReceivedCallback != null ) { this . messageReceivedCallback . messageReceived ( messageForm ) ; } } }", "nl": "Handles the message . If there was an error the object will be Error If there was no error the object will be JSONObject"}}
{"translation": {"code": "public UserQueryListing getAllUserQueries ( ) { UserQuery userQueryToGetInfoFor = new UserQuery ( ) ; if ( this . serviceTicket != null ) { userQueryToGetInfoFor . setServiceTicket ( this . serviceTicket ) ; } try { return new UserQueryListing ( this . postJson ( userQueryToGetInfoFor , WS . Path . UserQuery . Version1 . getAllUserQueries ( ) ) ) ; } // catch ( JSONException jsonExcept ) { throw new FluidClientException ( jsonExcept . getMessage ( ) , FluidClientException . ErrorCode . JSON_PARSING ) ; } }", "nl": "Retrieves all user query information ."}}
{"translation": {"code": "protected String getExceptionMessageVerbose ( String prefixParam , String uniqueReqIdParam , int numberOfSentItemsParam ) { StringBuilder formFieldsCombined = new StringBuilder ( ) ; int returnValSize = - 1 ; RespHandler respHandler = this . getHandler ( uniqueReqIdParam ) ; if ( respHandler instanceof AGenericListMessageHandler ) { List < ? extends ABaseFluidJSONObject > returnValue = ( ( AGenericListMessageHandler ) respHandler ) . getReturnValue ( ) ; if ( returnValue != null ) { returnValSize = returnValue . size ( ) ; returnValue . forEach ( listingItm -> { if ( listingItm instanceof ABaseListing ) { ABaseListing castedToListing = ( ABaseListing ) listingItm ; if ( castedToListing != null ) { castedToListing . getListing ( ) . forEach ( formItm -> { formFieldsCombined . append ( formItm . toString ( ) ) ; } ) ; } } else { formFieldsCombined . append ( listingItm . toString ( ) ) ; } } ) ; } } return ( prefixParam + \": \" + \"Timeout while waiting for all return data. There were '\" + returnValSize + \"' items after a Timeout of \" + ( TimeUnit . MILLISECONDS . toSeconds ( this . getTimeoutInMillis ( ) ) ) + \" seconds on req-ref-nr '\" + uniqueReqIdParam + \"'. Expected a total of '\" + numberOfSentItemsParam + \"' forms. Returned-Data '\" + formFieldsCombined . toString ( ) + \"'.\" ) ; }", "nl": "Generate a verbose Exception message ."}}
{"translation": {"code": "private List < String > getEchoMessagesFromReturnValue ( ) { List < String > returnListing = new ArrayList ( ) ; if ( this . returnValue == null ) { return returnListing ; } Iterator < T > iterForReturnVal = this . returnValue . iterator ( ) ; //Only add where the ECHO message is set... while ( iterForReturnVal . hasNext ( ) ) { T returnVal = iterForReturnVal . next ( ) ; if ( returnVal . getEcho ( ) == null ) { continue ; } returnListing . add ( returnVal . getEcho ( ) ) ; } return returnListing ; }", "nl": "Gets a list of echo messages of the current return values ."}}
{"translation": {"code": "@ Override public void connectionClosed ( ) { this . isConnectionClosed = true ; if ( this . completableFuture != null ) { //If there was no error... if ( this . getErrors ( ) . isEmpty ( ) ) { this . completableFuture . complete ( this . returnValue ) ; } //there was an error... else { Error firstFluidError = this . getErrors ( ) . get ( 0 ) ; this . completableFuture . completeExceptionally ( new FluidClientException ( firstFluidError . getErrorMessage ( ) , firstFluidError . getErrorCode ( ) ) ) ; } } }", "nl": "Event for when connection is closed ."}}
{"translation": {"code": "public synchronized String initNewRequest ( ) { String returnVal = UUID . randomUUID ( ) . toString ( ) ; this . messageHandler . put ( returnVal , this . getNewHandlerInstance ( ) ) ; return returnVal ; }", "nl": "Initiate a new request process ."}}
{"translation": {"code": "@ Override public void closeAndClean ( ) { CloseConnectionRunnable closeConnectionRunnable = new CloseConnectionRunnable ( this ) ; Thread closeConnThread = new Thread ( closeConnectionRunnable , \"Close ABaseClientWebSocket Connection\" ) ; closeConnThread . start ( ) ; }", "nl": "If the HTTP Client is set this will close and clean any connections that needs to be closed ."}}
{"translation": {"code": "public Form getFormDefinitionByName ( String formDefinitionNameParam ) { Form form = new Form ( formDefinitionNameParam ) ; if ( this . serviceTicket != null ) { form . setServiceTicket ( this . serviceTicket ) ; } return new Form ( this . postJson ( form , WS . Path . FormDefinition . Version1 . getByName ( ) ) ) ; }", "nl": "Retrieves the Form Definition by Name ."}}
{"translation": {"code": "public String getServiceTicketAsHexUpper ( ) { String serviceTicket = this . getServiceTicket ( ) ; if ( serviceTicket == null ) { return null ; } if ( serviceTicket . isEmpty ( ) ) { return serviceTicket ; } byte [ ] base64Bytes = Base64 . getDecoder ( ) . decode ( serviceTicket ) ; return this . bytesToHex ( base64Bytes ) ; }", "nl": "Gets the Service Ticket associated with the Fluid session as HEX ."}}
{"translation": {"code": "public Flow getFlowByName ( String flowNameParam ) { Flow flow = new Flow ( ) ; flow . setName ( flowNameParam ) ; if ( this . serviceTicket != null ) { flow . setServiceTicket ( this . serviceTicket ) ; } return new Flow ( this . postJson ( flow , WS . Path . Flow . Version1 . getByName ( ) ) ) ; }", "nl": "Retrieves a Flow by unique Name ."}}
{"translation": {"code": "public FlowStep getFlowStepByStep ( FlowStep flowStepParam ) { if ( this . serviceTicket != null && flowStepParam != null ) { flowStepParam . setServiceTicket ( this . serviceTicket ) ; } return new FlowStep ( this . postJson ( flowStepParam , WS . Path . FlowStep . Version1 . getByStep ( ) ) ) ; }", "nl": "Retrieves an existing Flow Step via Step ."}}
{"translation": {"code": "public FluidItemListing getFluidItemsForView ( JobView jobViewParam , int queryLimitParam , int offsetParam , String sortFieldParam , String sortOrderParam ) { if ( this . serviceTicket != null && jobViewParam != null ) { jobViewParam . setServiceTicket ( this . serviceTicket ) ; } try { return new FluidItemListing ( this . postJson ( jobViewParam , WS . Path . FlowItem . Version1 . getByJobView ( queryLimitParam , offsetParam , sortFieldParam , sortOrderParam ) ) ) ; } //rethrow as a Fluid Client exception. catch ( JSONException jsonExcept ) { throw new FluidClientException ( jsonExcept . getMessage ( ) , FluidClientException . ErrorCode . JSON_PARSING ) ; } }", "nl": "Retrieves items for the provided JobView ."}}
{"translation": {"code": "public Form lockFormContainer ( Form formParam , JobView jobViewParam ) { return this . lockFormContainer ( formParam , jobViewParam , null ) ; }", "nl": "Lock the provided form container for logged in user ."}}
{"translation": {"code": "public List < FluidItem > getPersonalInventoryItems ( ) { User loggedInUser = new User ( ) ; if ( this . serviceTicket != null ) { loggedInUser . setServiceTicket ( this . serviceTicket ) ; } try { return new FluidItemListing ( this . postJson ( loggedInUser , WS . Path . PersonalInventory . Version1 . getAllByLoggedInUser ( ) ) ) . getListing ( ) ; } //rethrow as a Fluid Client exception. catch ( JSONException jsonExcept ) { throw new FluidClientException ( jsonExcept . getMessage ( ) , FluidClientException . ErrorCode . JSON_PARSING ) ; } }", "nl": "Retrieves all Personal Inventory items for the logged in user ."}}
{"translation": {"code": "public Form unLockFormContainer ( Form formParam , User userToUnLockAsParam , boolean unlockAsyncParam , boolean removeFromPersonalInventoryParam ) { if ( this . serviceTicket != null && formParam != null ) { formParam . setServiceTicket ( this . serviceTicket ) ; } Long unLockAsUserId = ( userToUnLockAsParam == null ) ? null : userToUnLockAsParam . getId ( ) ; try { return new Form ( this . postJson ( formParam , WS . Path . FormContainer . Version1 . unLockFormContainer ( unLockAsUserId , unlockAsyncParam , removeFromPersonalInventoryParam ) ) ) ; } //rethrow as a Fluid Client exception. catch ( JSONException jsonExcept ) { throw new FluidClientException ( jsonExcept . getMessage ( ) , FluidClientException . ErrorCode . JSON_PARSING ) ; } }", "nl": "Unlock the provided form container from the logged in user ."}}
{"translation": {"code": "public FluidItem sendFormToFlow ( Form formToSendToFlowParam , String flowParam ) { FluidItem itemToSend = new FluidItem ( ) ; itemToSend . setForm ( formToSendToFlowParam ) ; itemToSend . setFlow ( flowParam ) ; if ( this . serviceTicket != null ) { itemToSend . setServiceTicket ( this . serviceTicket ) ; } try { return new FluidItem ( this . postJson ( itemToSend , WS . Path . FlowItem . Version1 . sendFlowItemToFlow ( ) ) ) ; } catch ( JSONException e ) { throw new FluidClientException ( e . getMessage ( ) , e , FluidClientException . ErrorCode . JSON_PARSING ) ; } }", "nl": "Send a form item to be part of a workflow ."}}
{"translation": {"code": "@ XmlTransient public static List < Role > convertToObjects ( String roleListingParam ) { if ( roleListingParam == null || roleListingParam . trim ( ) . isEmpty ( ) ) { return null ; } String [ ] listOfRoles = roleListingParam . split ( UtilGlobal . REG_EX_COMMA ) ; List < Role > returnVal = new ArrayList <> ( ) ; for ( String roleName : listOfRoles ) { Role roleToAdd = new Role ( ) ; roleToAdd . setName ( roleName . trim ( ) ) ; returnVal . add ( roleToAdd ) ; } return returnVal ; }", "nl": "Convert the comma separated list of roles as objects ."}}
{"translation": {"code": "public FormFieldListing getFieldsByFormNameAndLoggedInUser ( String formNameParam , boolean editOnlyFieldsParam ) { Form form = new Form ( ) ; form . setFormType ( formNameParam ) ; if ( this . serviceTicket != null ) { form . setServiceTicket ( this . serviceTicket ) ; } return new FormFieldListing ( this . postJson ( form , WS . Path . FormField . Version1 . getByFormDefinitionAndLoggedInUser ( editOnlyFieldsParam ) ) ) ; }", "nl": "Retrieve the Form Fields via Form Definition name ."}}
{"translation": {"code": "public FormFieldListing getFieldsByFormTypeIdAndLoggedInUser ( Long formTypeIdParam , boolean editOnlyFieldsParam ) { Form form = new Form ( ) ; form . setFormTypeId ( formTypeIdParam ) ; if ( this . serviceTicket != null ) { form . setServiceTicket ( this . serviceTicket ) ; } return new FormFieldListing ( this . postJson ( form , WS . Path . FormField . Version1 . getByFormDefinitionAndLoggedInUser ( editOnlyFieldsParam ) ) ) ; }", "nl": "Retrieve the Form Fields via Form Definition id ."}}
{"translation": {"code": "public FormHistoricData getMostRecentFormAndFieldHistoricData ( Form formParam ) { if ( formParam != null && this . serviceTicket != null ) { formParam . setServiceTicket ( this . serviceTicket ) ; } return new FormHistoricData ( this . postJson ( formParam , WS . Path . FormHistory . Version1 . getByMostRecentByFormContainer ( ) ) ) ; }", "nl": "Retrieves Electronic Form and Field historic information for the most recent modification ."}}
{"translation": {"code": "public List < Form > getAllByLoggedInUser ( boolean includeTableRecordTypesParam ) { Form form = new Form ( ) ; if ( this . serviceTicket != null ) { form . setServiceTicket ( this . serviceTicket ) ; } if ( includeTableRecordTypesParam ) { return new FormListing ( this . postJson ( form , WS . Path . FormDefinition . Version1 . getAllByLoggedInUserIncludeTableTypes ( ) ) ) . getListing ( ) ; } else { return new FormListing ( this . postJson ( form , WS . Path . FormDefinition . Version1 . getAllByLoggedInUser ( ) ) ) . getListing ( ) ; } }", "nl": "Retrieves all Form Definitions by logged in user ."}}
{"translation": {"code": "public Form unLockFormContainer ( Form formParam , boolean unlockAsyncParam ) { return this . unLockFormContainer ( formParam , null , unlockAsyncParam , false ) ; }", "nl": "Unlock the provided form container from the logged in user . Item will not be removed from users Personal Inventory ."}}
{"translation": {"code": "public byte [ ] getGravatarForUser ( User userParam , int sizeParam ) { if ( userParam == null ) { return null ; } try { JSONObject gravatarJSONObj = this . postJson ( userParam , WS . Path . User . Version1 . getGravatarByUser ( sizeParam ) ) ; String base64Text = gravatarJSONObj . optString ( JSON_TAG_DATA , \"\" ) ; if ( base64Text == null || base64Text . isEmpty ( ) ) { return null ; } return UtilGlobal . decodeBase64 ( base64Text ) ; } //JSON problem... catch ( JSONException jsonExcept ) { throw new FluidClientException ( jsonExcept . getMessage ( ) , jsonExcept , FluidClientException . ErrorCode . JSON_PARSING ) ; } }", "nl": "Retrieve the gravatar bytes for Fluid user ."}}
{"translation": {"code": "public byte [ ] getGravatarForEmail ( String emailAddressParam , int sizeParam ) { try { JSONObject gravatarJSONObj = this . getJson ( WS . Path . User . Version1 . getGravatarByEmail ( emailAddressParam , sizeParam ) ) ; String base64Text = gravatarJSONObj . optString ( JSON_TAG_DATA , \"\" ) ; if ( base64Text == null || base64Text . isEmpty ( ) ) { return null ; } return UtilGlobal . decodeBase64 ( base64Text ) ; } //JSON Parsing... catch ( JSONException jsonExcept ) { throw new FluidClientException ( jsonExcept . getMessage ( ) , jsonExcept , FluidClientException . ErrorCode . JSON_PARSING ) ; } //Encoding not supported... catch ( UnsupportedEncodingException unsEncExcept ) { throw new FluidClientException ( unsEncExcept . getMessage ( ) , unsEncExcept , FluidClientException . ErrorCode . IO_ERROR ) ; } }", "nl": "Retrieve the gravatar bytes by email ."}}
{"translation": {"code": "public Attachment createAttachment ( Attachment attachmentParam ) { if ( attachmentParam != null && this . serviceTicket != null ) { attachmentParam . setServiceTicket ( this . serviceTicket ) ; } return new Attachment ( this . putJson ( attachmentParam , WS . Path . Attachment . Version1 . attachmentCreate ( ) ) ) ; }", "nl": "Uploads a new Attachment . If there is an existing attachment with the same name a new version will be uploaded ."}}
{"translation": {"code": "public Attachment getAttachmentById ( Long attachmentIdParam , boolean includeAttachmentDataParam ) { Attachment attachment = new Attachment ( attachmentIdParam ) ; if ( this . serviceTicket != null ) { attachment . setServiceTicket ( this . serviceTicket ) ; } return new Attachment ( this . postJson ( attachment , WS . Path . Attachment . Version1 . getById ( includeAttachmentDataParam ) ) ) ; }", "nl": "Retrieves a Attachment by Primary Key ."}}
{"translation": {"code": "public Attachment forceDeleteAttachment ( Attachment attachmentParam ) { if ( attachmentParam != null && this . serviceTicket != null ) { attachmentParam . setServiceTicket ( this . serviceTicket ) ; } return new Attachment ( this . postJson ( attachmentParam , WS . Path . Attachment . Version1 . attachmentDelete ( true ) ) ) ; }", "nl": "Forcefully Delete an existing Attachment ."}}
{"translation": {"code": "public Attachment deleteAttachment ( Attachment attachmentParam ) { if ( attachmentParam != null && this . serviceTicket != null ) { attachmentParam . setServiceTicket ( this . serviceTicket ) ; } return new Attachment ( this . postJson ( attachmentParam , WS . Path . Attachment . Version1 . attachmentDelete ( ) ) ) ; }", "nl": "Delete an existing Attachment ."}}
{"translation": {"code": "public List < Field > getAllGlobalFieldValues ( ) { Field field = new Field ( ) ; //Set for Payara server... field . setFieldValue ( new MultiChoice ( ) ) ; if ( this . serviceTicket != null ) { field . setServiceTicket ( this . serviceTicket ) ; } return new GlobalFieldListing ( this . postJson ( field , Version1 . getAllValues ( ) ) ) . getListing ( ) ; }", "nl": "Retrieve all the Global field values ."}}
{"translation": {"code": "public User createAdminUser ( String passwordParam ) { User adminUserCreate = new User ( ) ; adminUserCreate . setPasswordClear ( passwordParam ) ; return new User ( this . putJson ( adminUserCreate , WS . Path . User . Version1 . userCreateAdmin ( ) ) ) ; }", "nl": "Create a new administrator user for Fluid . This function only works if there are no pre - existing admin user ."}}
{"translation": {"code": "public LicenseRequest applyLicense ( String licenseToApplyParam ) { LicenseRequest liceReq = new LicenseRequest ( ) ; liceReq . setLicenseCipherText ( licenseToApplyParam ) ; if ( this . serviceTicket != null ) { liceReq . setServiceTicket ( this . serviceTicket ) ; } return new LicenseRequest ( this . postJson ( liceReq , Version1 . licenseApply ( ) ) ) ; }", "nl": "Applies a generated license for the server ."}}
{"translation": {"code": "public String requestLicense ( LicenseRequest licenseRequestParam ) { if ( licenseRequestParam != null && this . serviceTicket != null ) { licenseRequestParam . setServiceTicket ( this . serviceTicket ) ; } return this . executeTxtReceiveTxt ( HttpMethod . POST , null , false , ( licenseRequestParam == null ) ? null : licenseRequestParam . toJsonObject ( ) . toString ( ) , ContentType . APPLICATION_JSON , Version1 . licenseRequest ( ) ) ; }", "nl": "Request a new license based on the license request input ."}}
{"translation": {"code": "public Field updateFieldValue ( Field globalFieldValueParam ) { if ( globalFieldValueParam != null && this . serviceTicket != null ) { globalFieldValueParam . setServiceTicket ( this . serviceTicket ) ; } return new Field ( this . postJson ( globalFieldValueParam , Version1 . globalFieldUpdateValue ( ) ) ) ; }", "nl": "Update an existing Global field value ."}}
{"translation": {"code": "public List < SQLResultSet > executeNativeSQLSynchronized ( NativeSQLQuery nativeSQLQueryParam ) { if ( nativeSQLQueryParam == null ) { return null ; } if ( nativeSQLQueryParam . getDatasourceName ( ) == null || nativeSQLQueryParam . getDatasourceName ( ) . isEmpty ( ) ) { throw new FluidClientException ( \"No data-source name provided. Not allowed.\" , FluidClientException . ErrorCode . FIELD_VALIDATE ) ; } //No query to execute... if ( ( nativeSQLQueryParam . getQuery ( ) == null || nativeSQLQueryParam . getQuery ( ) . isEmpty ( ) ) && ( nativeSQLQueryParam . getStoredProcedure ( ) == null || nativeSQLQueryParam . getStoredProcedure ( ) . isEmpty ( ) ) ) { return null ; } //Validate the echo... this . setEchoIfNotSet ( nativeSQLQueryParam ) ; //Start a new request... String uniqueReqId = this . initNewRequest ( ) ; //Send the actual message... this . sendMessage ( nativeSQLQueryParam , uniqueReqId ) ; try { List < SQLResultSet > returnValue = this . getHandler ( uniqueReqId ) . getCF ( ) . get ( this . getTimeoutInMillis ( ) , TimeUnit . MILLISECONDS ) ; //Connection was closed.. this is a problem.... if ( this . getHandler ( uniqueReqId ) . isConnectionClosed ( ) ) { throw new FluidClientException ( \"SQLUtil-WebSocket-ExecuteNativeSQL: \" + \"The connection was closed by the server prior to the response received.\" , FluidClientException . ErrorCode . IO_ERROR ) ; } return returnValue ; } //Interrupted... catch ( InterruptedException exceptParam ) { throw new FluidClientException ( \"SQLUtil-WebSocket-ExecuteNativeSQL: \" + exceptParam . getMessage ( ) , exceptParam , FluidClientException . ErrorCode . STATEMENT_EXECUTION_ERROR ) ; } //Error on the web-socket... catch ( ExecutionException executeProblem ) { Throwable cause = executeProblem . getCause ( ) ; //Fluid client exception... if ( cause instanceof FluidClientException ) { throw ( FluidClientException ) cause ; } else { throw new FluidClientException ( \"SQLUtil-WebSocket-ExecuteNativeSQL: \" + cause . getMessage ( ) , cause , FluidClientException . ErrorCode . STATEMENT_EXECUTION_ERROR ) ; } } //Timeout... catch ( TimeoutException eParam ) { throw new FluidClientException ( \"SQLUtil-WebSocket-ExecuteNativeSQL: Timeout while waiting for all return data. There were '\" + this . getHandler ( uniqueReqId ) . getReturnValue ( ) . size ( ) + \"' items after a Timeout of \" + ( TimeUnit . MILLISECONDS . toSeconds ( this . getTimeoutInMillis ( ) ) ) + \" seconds.\" , FluidClientException . ErrorCode . IO_ERROR ) ; } finally { this . removeHandler ( uniqueReqId ) ; } }", "nl": "Executes a native SQL query on the remote Fluid instance ."}}
{"translation": {"code": "public Field updateFieldValue ( Field userFieldValueParam ) { if ( userFieldValueParam != null && this . serviceTicket != null ) { userFieldValueParam . setServiceTicket ( this . serviceTicket ) ; } return new Field ( this . postJson ( userFieldValueParam , WS . Path . UserField . Version1 . userFieldUpdateValue ( ) ) ) ; }", "nl": "Update an existing User field value ."}}
{"translation": {"code": "public User changePasswordForLoggedInUser ( String existingPasswordParam , String newPasswordParam , String confirmNewPasswordParam ) { User toChangePasswordFor = new User ( ) ; if ( this . serviceTicket != null ) { toChangePasswordFor . setServiceTicket ( this . serviceTicket ) ; } String existingPassword = existingPasswordParam == null ? UtilGlobal . EMPTY : existingPasswordParam ; String newPassword = newPasswordParam == null ? UtilGlobal . EMPTY : newPasswordParam ; String confirmNewPassword = confirmNewPasswordParam == null ? UtilGlobal . EMPTY : confirmNewPasswordParam ; JSONObject passwordClear = new JSONObject ( ) ; passwordClear . put ( \"existing\" , existingPassword ) ; passwordClear . put ( \"new\" , newPassword ) ; passwordClear . put ( \"confirm_new\" , confirmNewPassword ) ; toChangePasswordFor . setPasswordClear ( passwordClear . toString ( ) ) ; return new User ( this . postJson ( toChangePasswordFor , WS . Path . User . Version1 . changePassword ( ) ) ) ; }", "nl": "Change the password for the currently logged in user ."}}
{"translation": {"code": "public List < Collaboration > getAllToByLoggedIn ( ) { CollaborationListing collaborationListing = new CollaborationListing ( ) ; if ( this . serviceTicket != null ) { collaborationListing . setServiceTicket ( this . serviceTicket ) ; } return new CollaborationListing ( this . postJson ( collaborationListing , WS . Path . Collaboration . Version1 . getAllToByLoggedIn ( ) ) ) . getListing ( ) ; }", "nl": "Retrieve all Collaboration items TO where logged in user ."}}
{"translation": {"code": "public void shutdown ( ) { if ( this . memcachedClient != null && ! this . memcachedClient . isShutdown ( ) ) { try { this . memcachedClient . shutdown ( ) ; } // catch ( IOException eParam ) { throw new FluidCacheException ( \"Unable to create shutdown MemCache client. \" + eParam . getMessage ( ) , eParam ) ; } } }", "nl": "Closes the Memcached client connection ."}}
{"translation": {"code": "public Map < Long , String > getFormDefinitionIdAndTitle ( ) { //When already cached, use the cached value... if ( ! LOCAL_MAPPING . isEmpty ( ) ) { Map < Long , String > returnVal = new HashMap <> ( LOCAL_MAPPING ) ; //The id's are outdated... if ( System . currentTimeMillis ( ) > timeToUpdateAgain ) { synchronized ( LOCAL_MAPPING ) { LOCAL_MAPPING . clear ( ) ; } } return returnVal ; } //Only allow one thread to set the local mapping... synchronized ( LOCAL_MAPPING ) { if ( ! LOCAL_MAPPING . isEmpty ( ) ) { return new HashMap <> ( LOCAL_MAPPING ) ; } PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try { ISyntax syntax = SyntaxFactory . getInstance ( ) . getSyntaxFor ( this . getSQLTypeFromConnection ( ) , ISyntax . ProcedureMapping . FormDefinition . GetFormDefinitions ) ; preparedStatement = this . getConnection ( ) . prepareStatement ( syntax . getPreparedStatement ( ) ) ; resultSet = preparedStatement . executeQuery ( ) ; //Iterate each of the form containers... while ( resultSet . next ( ) ) { Long id = resultSet . getLong ( 1 ) ; String title = resultSet . getString ( 2 ) ; LOCAL_MAPPING . put ( id , title ) ; } //Update in 10 mins... timeToUpdateAgain = ( System . currentTimeMillis ( ) + TimeUnit . MINUTES . toMillis ( 10 ) ) ; } // catch ( SQLException sqlError ) { throw new FluidSQLException ( sqlError ) ; } // finally { this . closeStatement ( preparedStatement , resultSet ) ; } return new HashMap <> ( LOCAL_MAPPING ) ; } }", "nl": "Retrieves the Form Definition and Title mapping currently stored in Fluid ."}}
{"translation": {"code": "private MemcachedClient initXMemcachedClient ( ) { if ( this . memcachedClient != null && ! this . memcachedClient . isShutdown ( ) ) { return this . memcachedClient ; } try { this . memcachedClient = new XMemcachedClient ( this . cacheHost , this . cachePort ) ; return this . memcachedClient ; } //Unable to create client with connection. catch ( IOException e ) { throw new FluidCacheException ( \"Unable to create MemCache client. \" + e . getMessage ( ) , e ) ; } }", "nl": "Creates an instance of MemcachedClient ."}}
{"translation": {"code": "protected long toLongSafe ( String toParseParam ) { if ( toParseParam == null || toParseParam . trim ( ) . isEmpty ( ) ) { return - 1 ; } try { return Long . parseLong ( toParseParam . trim ( ) ) ; } catch ( NumberFormatException e ) { return - 1 ; } }", "nl": "Returns - 1 if there is a problem with conversion ."}}
{"translation": {"code": "public GetIndexResponse getOrCreateIndex ( String indexParam ) { if ( this . doesIndexExist ( indexParam ) ) { return this . client . admin ( ) . indices ( ) . prepareGetIndex ( ) . get ( ) ; } else { CreateIndexRequestBuilder createIndexRequestBuilder = this . client . admin ( ) . indices ( ) . prepareCreate ( indexParam ) ; CreateIndexResponse mappingCreateResponse = createIndexRequestBuilder . execute ( ) . actionGet ( ) ; if ( ! mappingCreateResponse . isAcknowledged ( ) ) { throw new FluidElasticSearchException ( \"Index Creation for '\" + indexParam + \"' not acknowledged by ElasticSearch.\" ) ; } return this . client . admin ( ) . indices ( ) . prepareGetIndex ( ) . get ( ) ; } }", "nl": "Creates a new index or fetches existing index ."}}
{"translation": {"code": "protected final List < Form > populateTableFields ( boolean addAllTableRecordsForReturnParam , boolean includeFieldDataParam , List < Field > formFieldsParam ) { if ( formFieldsParam == null || formFieldsParam . isEmpty ( ) ) { return null ; } List < Form > allTableRecordsFromAllFields = addAllTableRecordsForReturnParam ? new ArrayList ( ) : null ; //Populate each of the Table Fields... for ( Field descendantField : formFieldsParam ) { //Skip if not Table Field... if ( ! ( descendantField . getFieldValue ( ) instanceof TableField ) ) { continue ; } TableField tableField = ( TableField ) descendantField . getFieldValue ( ) ; List < Form > tableRecordWithIdOnly = tableField . getTableRecords ( ) ; if ( tableRecordWithIdOnly == null || tableRecordWithIdOnly . isEmpty ( ) ) { continue ; } //Populate the ids for lookup... List < Long > formIdsOnly = new ArrayList ( ) ; for ( Form tableRecord : tableRecordWithIdOnly ) { formIdsOnly . add ( tableRecord . getId ( ) ) ; } List < Form > populatedTableRecords = this . getFormsByIds ( Index . TABLE_RECORD , formIdsOnly , includeFieldDataParam , DEFAULT_OFFSET , MAX_NUMBER_OF_TABLE_RECORDS ) ; if ( addAllTableRecordsForReturnParam && populatedTableRecords != null ) { allTableRecordsFromAllFields . addAll ( populatedTableRecords ) ; } tableField . setTableRecords ( populatedTableRecords ) ; descendantField . setFieldValue ( tableField ) ; } return allTableRecordsFromAllFields ; }", "nl": "Populate all the Table Field values from the Table index ."}}
{"translation": {"code": "@ Override public void closeConnection ( ) { CloseConnectionRunnable closeConnectionRunnable = new CloseConnectionRunnable ( this ) ; Thread closeConnThread = new Thread ( closeConnectionRunnable , \"Close ABaseES Connection\" ) ; closeConnThread . start ( ) ; }", "nl": "Close the SQL and ElasticSearch Connection ."}}
{"translation": {"code": "public void closeConnection ( ) { if ( this . connection == null ) { return ; } try { if ( this . connection . isClosed ( ) ) { return ; } this . connection . close ( ) ; } catch ( SQLException sqlExcept ) { throw new FluidSQLException ( sqlExcept ) ; } }", "nl": "Close the SQL Connection ."}}
{"translation": {"code": "public File convertDocumentToPDF ( File inputDocumentParam ) { if ( inputDocumentParam == null || ! inputDocumentParam . exists ( ) ) { throw new UtilException ( \"Input document to convert not provided or does not exist.\" , UtilException . ErrorCode . COMMAND ) ; } if ( ! inputDocumentParam . isFile ( ) ) { throw new UtilException ( \"Input document '' is not a file.\" , UtilException . ErrorCode . COMMAND ) ; } File parentFolder = inputDocumentParam . getParentFile ( ) ; String inputFilenameWithoutExt = inputDocumentParam . getName ( ) ; int indexOfDot = - 1 ; if ( ( indexOfDot = inputFilenameWithoutExt . indexOf ( ' ' ) ) > - 1 ) { inputFilenameWithoutExt = inputFilenameWithoutExt . substring ( 0 , indexOfDot ) ; } File generatedPdfFileOut = new File ( parentFolder . getAbsolutePath ( ) . concat ( File . separator ) . concat ( inputFilenameWithoutExt ) . concat ( \".pdf\" ) ) ; String completeOutputPath = generatedPdfFileOut . getAbsolutePath ( ) ; try { CommandUtil . CommandResult commandResult = this . commandUtil . executeCommand ( CommandUtil . FLUID_CLI , COMMAND_CONVERT_DOC_TO_PDF , \"-i\" , inputDocumentParam . getAbsolutePath ( ) , \"-o\" , completeOutputPath ) ; //There is a problem... if ( commandResult . getExitCode ( ) != 0 ) { throw new UtilException ( \"Unable to convert '\" + inputDocumentParam . getName ( ) + \"' to PDF. \" + commandResult . toString ( ) , UtilException . ErrorCode . COMMAND ) ; } File returnVal = new File ( completeOutputPath ) ; if ( ! returnVal . exists ( ) ) { throw new UtilException ( \"Command executed, but no output file. Expected PDF at '\" + completeOutputPath + \"'.\" , UtilException . ErrorCode . GENERAL ) ; } return returnVal ; } // catch ( IOException eParam ) { throw new UtilException ( \"Problem executing command. \" + eParam . getMessage ( ) , eParam , UtilException . ErrorCode . GENERAL ) ; } }", "nl": "Makes use of the Fluid Core to convert a document into a PDF file ."}}
{"translation": {"code": "private Form mapFormContainerTo ( Map < Long , String > definitionAndTitleParam , ResultSet resultSetParam ) throws SQLException { Long formId = resultSetParam . getLong ( SQLColumnIndex . _01_FORM_ID ) ; String formType = definitionAndTitleParam . get ( resultSetParam . getLong ( SQLColumnIndex . _02_FORM_TYPE ) ) ; String title = resultSetParam . getString ( SQLColumnIndex . _03_TITLE ) ; Date created = resultSetParam . getDate ( SQLColumnIndex . _04_CREATED ) ; Date lastUpdated = resultSetParam . getDate ( SQLColumnIndex . _05_LAST_UPDATED ) ; Long currentUserId = resultSetParam . getLong ( SQLColumnIndex . _06_CURRENT_USER_ID ) ; if ( formType == null ) { throw new SQLException ( \"No mapping found for Form Type '\" + resultSetParam . getLong ( SQLColumnIndex . _02_FORM_TYPE ) + \"'.\" ) ; } Form toAdd = new Form ( formType ) ; toAdd . setId ( formId ) ; toAdd . setTitle ( title ) ; //Created... if ( created != null ) { toAdd . setDateCreated ( new Date ( created . getTime ( ) ) ) ; } //Last Updated... if ( lastUpdated != null ) { toAdd . setDateLastUpdated ( new Date ( lastUpdated . getTime ( ) ) ) ; } //Current User... if ( currentUserId != null && currentUserId . longValue ( ) > 0 ) { User currentUser = new User ( ) ; currentUser . setId ( currentUserId ) ; toAdd . setCurrentUser ( currentUser ) ; } return toAdd ; }", "nl": "Maps the Form to the provided Definition - Id and Title ."}}
{"translation": {"code": "private String getStorageKeyFrom ( Long formDefIdParam , Long formContIdParam , Long formFieldIdParam ) { StringBuilder stringBuff = new StringBuilder ( ) ; //Form Definition... if ( formDefIdParam == null ) { stringBuff . append ( NULL ) ; } else { stringBuff . append ( formDefIdParam . toString ( ) ) ; } stringBuff . append ( DASH ) ; //Form Container... if ( formContIdParam == null ) { stringBuff . append ( NULL ) ; } else { stringBuff . append ( formContIdParam . toString ( ) ) ; } stringBuff . append ( DASH ) ; //Form Field... if ( formFieldIdParam == null ) { stringBuff . append ( NULL ) ; } else { stringBuff . append ( formFieldIdParam . toString ( ) ) ; } return stringBuff . toString ( ) ; }", "nl": "Generates the storage key the provided parameters ."}}