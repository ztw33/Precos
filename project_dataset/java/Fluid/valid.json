{"translation": {"code": "private ResponseHandler < String > getJsonResponseHandler ( final String urlCalledParam ) { // Create a custom response handler ResponseHandler < String > responseHandler = new ResponseHandler < String > ( ) { /**\n\t\t\t * Process the {@code responseParam} and return text if valid.\n\t\t\t *\n\t\t\t * @param responseParam The HTTP response from the server.\n\t\t\t * @return Text response.\n\t\t\t * @throws IOException If there are any communication or I/O problems.\n\t\t\t */ public String handleResponse ( final HttpResponse responseParam ) throws IOException { int status = responseParam . getStatusLine ( ) . getStatusCode ( ) ; if ( status == 404 ) { throw new FluidClientException ( \"Endpoint for Service not found. URL [\" + urlCalledParam + \"].\" , FluidClientException . ErrorCode . CONNECT_ERROR ) ; } else if ( status >= 200 && status < 300 ) { HttpEntity entity = responseParam . getEntity ( ) ; String responseJsonString = ( entity == null ) ? null : EntityUtils . toString ( entity ) ; return responseJsonString ; } else if ( status == 400 ) { //Bad Request... Server Side Error meant for client... HttpEntity entity = responseParam . getEntity ( ) ; String responseJsonString = ( entity == null ) ? null : EntityUtils . toString ( entity ) ; return responseJsonString ; } else { HttpEntity entity = responseParam . getEntity ( ) ; String responseString = ( entity != null ) ? EntityUtils . toString ( entity ) : null ; throw new FluidClientException ( \"Unexpected response status: \" + status + \". \" + responseParam . getStatusLine ( ) . getReasonPhrase ( ) + \". \\nResponse Text [\" + responseString + \"]\" , FluidClientException . ErrorCode . IO_ERROR ) ; } } } ; return responseHandler ; }", "nl": "Get a text based response handler used mainly for JSON ."}}
{"translation": {"code": "protected String getMetaDataForDecimalAs ( String metaDataPrefixParam , double minParam , double maxParam , double stepFactorParam , String prefixParam ) { StringBuffer returnBuffer = new StringBuffer ( ) ; if ( metaDataPrefixParam != null && ! metaDataPrefixParam . isEmpty ( ) ) { returnBuffer . append ( metaDataPrefixParam ) ; } //Min... returnBuffer . append ( FieldMetaData . Decimal . UNDERSCORE ) ; returnBuffer . append ( FieldMetaData . Decimal . MIN ) ; returnBuffer . append ( FieldMetaData . Decimal . SQ_OPEN ) ; returnBuffer . append ( minParam ) ; returnBuffer . append ( FieldMetaData . Decimal . SQ_CLOSE ) ; returnBuffer . append ( FieldMetaData . Decimal . UNDERSCORE ) ; //Max... returnBuffer . append ( FieldMetaData . Decimal . MAX ) ; returnBuffer . append ( FieldMetaData . Decimal . SQ_OPEN ) ; returnBuffer . append ( maxParam ) ; returnBuffer . append ( FieldMetaData . Decimal . SQ_CLOSE ) ; returnBuffer . append ( FieldMetaData . Decimal . UNDERSCORE ) ; //Step Factor... returnBuffer . append ( FieldMetaData . Decimal . STEP_FACTOR ) ; returnBuffer . append ( FieldMetaData . Decimal . SQ_OPEN ) ; returnBuffer . append ( stepFactorParam ) ; returnBuffer . append ( FieldMetaData . Decimal . SQ_CLOSE ) ; returnBuffer . append ( FieldMetaData . Decimal . UNDERSCORE ) ; //Prefix String prefix = ( prefixParam == null ) ? \"\" : prefixParam ; returnBuffer . append ( FieldMetaData . Decimal . PREFIX ) ; returnBuffer . append ( FieldMetaData . Decimal . SQ_OPEN ) ; returnBuffer . append ( prefix ) ; returnBuffer . append ( FieldMetaData . Decimal . SQ_CLOSE ) ; return returnBuffer . toString ( ) ; }", "nl": "Construct the correct Meta - Data from parameters ."}}
{"translation": {"code": "private String getPathToFluidSpecificTrustStore ( ) { String fluidSystemTrustStore = System . getProperty ( SYSTEM_PROP_FLUID_TRUST_STORE ) ; if ( fluidSystemTrustStore == null || fluidSystemTrustStore . trim ( ) . isEmpty ( ) ) { return null ; } File certFile = new File ( fluidSystemTrustStore ) ; if ( certFile . exists ( ) && certFile . isFile ( ) ) { return fluidSystemTrustStore ; } return null ; }", "nl": "Retrieves the system property for the Fluid specific trust store ."}}
{"translation": {"code": "@ Override @ XmlTransient public void populateFromElasticSearchJson ( JSONObject jsonObjectParam , List < Field > formFieldsParam ) throws JSONException { throw new FluidElasticSearchException ( \"Method not implemented. Make use of 'populateFromElasticSearchJson(JSONObject jsonObjectParam)' method.\" ) ; }", "nl": "Not allowed to call this method ."}}
{"translation": {"code": "public Field updateFieldValue ( Field routeFieldValueParam ) { if ( routeFieldValueParam != null && this . serviceTicket != null ) { routeFieldValueParam . setServiceTicket ( this . serviceTicket ) ; } return new Field ( this . postJson ( routeFieldValueParam , Version1 . routeFieldUpdateValue ( ) ) ) ; }", "nl": "Update an existing Route field value ."}}
{"translation": {"code": "public Field updateFieldDecimalPlain ( Field routeFieldParam ) { if ( routeFieldParam != null && this . serviceTicket != null ) { routeFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( routeFieldParam != null ) { routeFieldParam . setTypeAsEnum ( Field . Type . Decimal ) ; routeFieldParam . setTypeMetaData ( FieldMetaData . Decimal . PLAIN ) ; } return new Field ( this . postJson ( routeFieldParam , Version1 . routeFieldUpdate ( ) ) ) ; }", "nl": "Update an existing Decimal field ."}}
{"translation": {"code": "public Field createFieldParagraphTextHTML ( Field routeFieldParam ) { if ( routeFieldParam != null && this . serviceTicket != null ) { routeFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( routeFieldParam != null ) { routeFieldParam . setTypeAsEnum ( Field . Type . ParagraphText ) ; routeFieldParam . setTypeMetaData ( FieldMetaData . ParagraphText . HTML ) ; } return new Field ( this . putJson ( routeFieldParam , Version1 . routeFieldCreate ( ) ) ) ; }", "nl": "Create a new Paragraph HTML field ."}}
{"translation": {"code": "public Field createFieldDateTimeDate ( Field routeFieldParam ) { if ( routeFieldParam != null && this . serviceTicket != null ) { routeFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( routeFieldParam != null ) { routeFieldParam . setTypeAsEnum ( Field . Type . DateTime ) ; routeFieldParam . setTypeMetaData ( FieldMetaData . DateTime . DATE ) ; } return new Field ( this . putJson ( routeFieldParam , Version1 . routeFieldCreate ( ) ) ) ; }", "nl": "Create a new Date only field ."}}
{"translation": {"code": "public Field createFieldMultiChoiceSelectMany ( Field routeFieldParam , List < String > multiChoiceValuesParam ) { if ( routeFieldParam != null && this . serviceTicket != null ) { routeFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( multiChoiceValuesParam == null || multiChoiceValuesParam . isEmpty ( ) ) { throw new FluidClientException ( \"No Multi-choice values provided.\" , FluidClientException . ErrorCode . FIELD_VALIDATE ) ; } if ( routeFieldParam != null ) { routeFieldParam . setTypeAsEnum ( Field . Type . MultipleChoice ) ; routeFieldParam . setTypeMetaData ( FieldMetaData . MultiChoice . SELECT_MANY ) ; routeFieldParam . setFieldValue ( new MultiChoice ( multiChoiceValuesParam ) ) ; } return new Field ( this . putJson ( routeFieldParam , Version1 . routeFieldCreate ( ) ) ) ; }", "nl": "Create a new Multi Choice select Many field ."}}
{"translation": {"code": "public Field createFieldParagraphTextPlain ( Field routeFieldParam ) { if ( routeFieldParam != null && this . serviceTicket != null ) { routeFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( routeFieldParam != null ) { routeFieldParam . setTypeAsEnum ( Field . Type . ParagraphText ) ; routeFieldParam . setTypeMetaData ( FieldMetaData . ParagraphText . PLAIN ) ; } return new Field ( this . putJson ( routeFieldParam , Version1 . routeFieldCreate ( ) ) ) ; }", "nl": "Create a new Paragraph Text field ."}}
{"translation": {"code": "public Field createFieldTextPlain ( Field routeFieldParam ) { if ( routeFieldParam != null && this . serviceTicket != null ) { routeFieldParam . setServiceTicket ( this . serviceTicket ) ; } if ( routeFieldParam != null ) { routeFieldParam . setTypeAsEnum ( Field . Type . Text ) ; routeFieldParam . setTypeMetaData ( FieldMetaData . Text . PLAIN ) ; } return new Field ( this . putJson ( routeFieldParam , Version1 . routeFieldCreate ( ) ) ) ; }", "nl": "Create a new Plain Text field ."}}
{"translation": {"code": "private List < Field > getFieldValuesForFormFromCache ( Long formIdParam , List < FormFieldListing > listingReturnFieldValsPopulatedParam , Form [ ] formsToFetchForLocalCacheArrParam ) { if ( formIdParam == null || formIdParam . longValue ( ) < 1 ) { return null ; } if ( listingReturnFieldValsPopulatedParam == null || listingReturnFieldValsPopulatedParam . isEmpty ( ) ) { return null ; } if ( formsToFetchForLocalCacheArrParam == null || formsToFetchForLocalCacheArrParam . length == 0 ) { return null ; } for ( Form formIter : formsToFetchForLocalCacheArrParam ) { //Form is a match... if ( formIdParam . equals ( formIter . getId ( ) ) ) { String echoToUse = formIter . getEcho ( ) ; for ( FormFieldListing fieldListing : listingReturnFieldValsPopulatedParam ) { if ( echoToUse . equals ( fieldListing . getEcho ( ) ) ) { return fieldListing . getListing ( ) ; } } } } return null ; }", "nl": "Populate the field values from the cache ."}}
{"translation": {"code": "@ OnMessage public void onMessage ( String messageParam ) { boolean handlerFoundForMsg = false ; for ( IMessageResponseHandler handler : new ArrayList <> ( this . messageHandlers . values ( ) ) ) { Object qualifyObj = handler . doesHandlerQualifyForProcessing ( messageParam ) ; if ( qualifyObj instanceof Error ) { handler . handleMessage ( qualifyObj ) ; } else if ( qualifyObj instanceof JSONObject ) { handler . handleMessage ( qualifyObj ) ; handlerFoundForMsg = true ; break ; } } if ( ! handlerFoundForMsg ) { throw new FluidClientException ( \"No handler found for message;\\n\" + messageParam , FluidClientException . ErrorCode . IO_ERROR ) ; } }", "nl": "Callback hook for Message Events . This method will be invoked when a client sends a message ."}}