{"translation": {"code": "public static String translateCountryName ( String country , Locale language ) { country = StringUtils . trimToNull ( country ) ; if ( country == null ) return null ; for ( String iso2Code : Locale . getISOCountries ( ) ) { Locale countryLocale = new Locale ( iso2Code , iso2Code ) ; for ( Locale translationLocale : LocaleUtils . availableLocaleList ( ) ) { String name = StringUtils . trimToNull ( countryLocale . getDisplayCountry ( translationLocale ) ) ; if ( name != null && name . equalsIgnoreCase ( country ) ) { name = StringUtils . trimToNull ( countryLocale . getDisplayCountry ( language ) ) ; if ( name != null ) return name ; } } } return null ; }", "nl": "Translate a country name into another language ."}}
{"translation": {"code": "public static String getCountryISO2 ( String country ) { country = StringUtils . trimToNull ( country ) ; if ( country == null ) return null ; if ( country . length ( ) == 2 ) return country ; String [ ] iso2Codes = Locale . getISOCountries ( ) ; if ( country . length ( ) == 3 ) { String iso2Code = LocaleUtils . getCountryISO2FromISO3 ( country ) ; if ( iso2Code != null ) return iso2Code ; } for ( String iso2Code : iso2Codes ) { Locale countryLocale = new Locale ( iso2Code , iso2Code ) ; for ( Locale translationLocale : LocaleUtils . availableLocaleList ( ) ) { String name = StringUtils . trimToNull ( countryLocale . getDisplayCountry ( translationLocale ) ) ; if ( name != null && name . equalsIgnoreCase ( country ) ) return iso2Code ; } } return null ; }", "nl": "Return an ISO - 2 country code from a country name ."}}
{"translation": {"code": "public static String getCountryName ( String country , Locale language ) { country = StringUtils . trimToNull ( country ) ; if ( country == null ) return null ; String iso2Code = LocaleUtils . getCountryISO2 ( country ) ; if ( iso2Code != null ) { String name = StringUtils . trimToNull ( new Locale ( iso2Code , iso2Code ) . getDisplayCountry ( language ) ) ; if ( name != null ) return name ; } return null ; }", "nl": "Return a country name in another language ."}}
{"translation": {"code": "public static String getCountryISO3FromISO2 ( String iso2Code ) { iso2Code = StringUtils . trimToNull ( iso2Code ) ; if ( iso2Code == null ) return null ; if ( iso2Code . length ( ) == 2 ) { Locale countryLocale = new Locale ( iso2Code , iso2Code ) ; String iso3Code = StringUtils . trimToNull ( countryLocale . getISO3Country ( ) ) ; if ( iso3Code != null ) return iso3Code ; } return null ; }", "nl": "Create an ISO - 3 country code from an ISO - 2 country code ."}}
{"translation": {"code": "public static boolean isNumeric ( String value , Locale locale ) { if ( value == null ) return false ; int start = 0 ; final DecimalFormatSymbols symbols = ( locale != null ) ? DecimalFormatSymbols . getInstance ( locale ) : DecimalFormatSymbols . getInstance ( ) ; if ( value . startsWith ( \"+\" ) || value . startsWith ( \"-\" ) ) start ++ ; boolean fraction = false ; for ( int i = start ; i < value . length ( ) ; i ++ ) { final char c = value . charAt ( i ) ; if ( c == symbols . getDecimalSeparator ( ) && ! fraction ) { fraction = true ; continue ; } if ( c == symbols . getGroupingSeparator ( ) && ! fraction ) { continue ; } if ( ! Character . isDigit ( c ) ) { return false ; } } return true ; }", "nl": "Test if a string contains a parsable number ."}}
{"translation": {"code": "public void dump ( Writer writer , String lineSeparator ) throws IOException { for ( int i = 0 ; i < this . getRecordLenth ( ) ; i ++ ) { StringBuilder txt = new StringBuilder ( ) ; try ( StringReader reader = new StringReader ( StringUtils . trimToEmpty ( this . get ( i ) ) ) ) { for ( String line : IOUtils . readLines ( reader ) ) { if ( txt . length ( ) > 0 ) txt . append ( lineSeparator ) ; txt . append ( line ) ; } } writer . write ( i + \":\" + txt . toString ( ) ) ; writer . write ( System . lineSeparator ( ) ) ; } }", "nl": "Write content of the record in a human readable form ."}}
{"translation": {"code": "public static String randomNumeric ( int length ) { return new RandomStringGenerator . Builder ( ) . filteredBy ( NUMBERS ) . build ( ) . generate ( length ) ; }", "nl": "Generate a random string with ASCII digits ."}}
{"translation": {"code": "public static String randomLetters ( int length ) { return new RandomStringGenerator . Builder ( ) . filteredBy ( LETTERS ) . build ( ) . generate ( length ) ; }", "nl": "Generate a random string with ASCII letters ."}}
{"translation": {"code": "@ SuppressWarnings ( \"Duplicates\" ) public static Element createUserDefinedSimplefield ( Document doc , String name , String value ) { Element root = XmlUtils . getRootElement ( doc ) ; Element node = doc . createElementNS ( root . getNamespaceURI ( ) , \"user_defined_simplefield\" ) ; node . setAttribute ( \"feldname\" , name ) ; node . setTextContent ( value ) ; return node ; }", "nl": "Helper method to create a &lt ; user_defined_simplefield&gt ; element with a feldname attribute and a string value ."}}
{"translation": {"code": "protected final void set ( int pos , String value ) { value = StringUtils . trimToNull ( value ) ; if ( value != null ) this . values . put ( pos , value ) ; else if ( this . values . containsKey ( pos ) ) this . values . remove ( pos ) ; }", "nl": "Sets the value of this record at a certain index position ."}}