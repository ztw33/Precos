{"translation": {"code": "protected Iterable < String > print ( ) { final int length = this . getRecordLenth ( ) ; List < String > row = new ArrayList <> ( ) ; for ( int i = 0 ; i < length ; i ++ ) { row . add ( this . get ( i ) ) ; } return row ; }", "nl": "Returns a list of values for this record as they are written into CSV ."}}
{"translation": {"code": "@ Override public boolean handleEvent ( ValidationEvent event ) { if ( event == null ) throw new IllegalArgumentException ( \"No validation event was provided!\" ) ; int line = - 1 ; int col = - 1 ; if ( event . getLocator ( ) != null ) { line = event . getLocator ( ) . getLineNumber ( ) ; col = event . getLocator ( ) . getColumnNumber ( ) ; } if ( ValidationEvent . FATAL_ERROR == event . getSeverity ( ) ) { LOGGER . warn ( \"fatal validation error\" ) ; if ( line > - 1 && col > - 1 ) LOGGER . warn ( \"> at line \" + line + \" / column \" + col ) ; LOGGER . warn ( \"> \" + event . getMessage ( ) ) ; return false ; } if ( ValidationEvent . WARNING == event . getSeverity ( ) ) { LOGGER . warn ( \"validation warning\" ) ; if ( line > - 1 && col > - 1 ) LOGGER . warn ( \"> at line \" + line + \" / column \" + col ) ; LOGGER . warn ( \"> \" + event . getMessage ( ) ) ; } else { LOGGER . warn ( \"validation error\" ) ; if ( line > - 1 && col > - 1 ) LOGGER . warn ( \"> at line \" + line + \" / column \" + col ) ; LOGGER . warn ( \"> \" + event . getMessage ( ) ) ; } return true ; }", "nl": "Receive notification of a validation warning or error ."}}
{"translation": {"code": "public static String getCountryISO3 ( String country ) { country = StringUtils . trimToNull ( country ) ; if ( country == null ) return null ; if ( country . length ( ) == 3 ) return country ; String [ ] iso2Codes = Locale . getISOCountries ( ) ; if ( country . length ( ) == 2 ) { String iso3code = LocaleUtils . getCountryISO3FromISO2 ( country ) ; if ( iso3code != null ) return iso3code ; } for ( String iso2Code : iso2Codes ) { Locale countryLocale = new Locale ( iso2Code , iso2Code ) ; String iso3Code = StringUtils . trimToNull ( countryLocale . getISO3Country ( ) ) ; if ( iso3Code == null ) continue ; for ( Locale translationLocale : LocaleUtils . availableLocaleList ( ) ) { String name = StringUtils . trimToNull ( countryLocale . getDisplayCountry ( translationLocale ) ) ; if ( name != null && name . equalsIgnoreCase ( country ) ) return iso3Code ; } } return null ; }", "nl": "Return an ISO - 3 country code from a country name ."}}
{"translation": {"code": "public static String getCountryISO2FromISO3 ( String iso3Code ) { iso3Code = StringUtils . trimToNull ( iso3Code ) ; if ( iso3Code == null ) return null ; if ( iso3Code . length ( ) == 3 ) { for ( String iso2Code : Locale . getISOCountries ( ) ) { Locale countryLocale = new Locale ( iso2Code , iso2Code ) ; String countryISO3 = StringUtils . trimToNull ( countryLocale . getISO3Country ( ) ) ; if ( countryISO3 != null && countryISO3 . equalsIgnoreCase ( iso3Code ) ) { return iso2Code ; } } } return null ; }", "nl": "Create an ISO - 2 country code from an ISO - 3 country code ."}}
{"translation": {"code": "@ Generated ( value = \"com.sun.tools.xjc.Driver\" , date = \"2018-10-12T02:42:33+02:00\" , comments = \"JAXB RI v2.2.11\" ) public List < ValueListsType . VALUELIST > getVALUELIST ( ) { if ( valuelist == null ) { valuelist = new ArrayList < ValueListsType . VALUELIST > ( ) ; } return this . valuelist ; }", "nl": "Gets the value of the valuelist property ."}}
{"translation": {"code": "@ Generated ( value = \"com.sun.tools.xjc.Driver\" , date = \"2018-10-12T02:42:33+02:00\" , comments = \"JAXB RI v2.2.11\" ) public List < MetaDataType . FIELD > getFIELD ( ) { if ( field == null ) { field = new ArrayList < MetaDataType . FIELD > ( ) ; } return this . field ; }", "nl": "Gets the value of the field property ."}}
{"translation": {"code": "@ Generated ( value = \"com.sun.tools.xjc.Driver\" , date = \"2018-10-12T02:42:33+02:00\" , comments = \"JAXB RI v2.2.11\" ) public List < ResultSetType . ROW > getROW ( ) { if ( row == null ) { row = new ArrayList < ResultSetType . ROW > ( ) ; } return this . row ; }", "nl": "Gets the value of the row property ."}}
{"translation": {"code": "public String [ ] getFieldNames ( ) { List < String > names = new ArrayList <> ( ) ; for ( MetaDataType . FIELD field : this . fields ) { names . add ( field . getNAME ( ) ) ; } return names . toArray ( new String [ 0 ] ) ; }", "nl": "Returns the names of specified fields ."}}
{"translation": {"code": "public static String random ( int length ) { return new RandomStringGenerator . Builder ( ) . filteredBy ( NUMBERS , LETTERS ) . build ( ) . generate ( length ) ; }", "nl": "Generate a random string with ASCII letters and digits ."}}
{"translation": {"code": "protected final String get ( int pos , String defaultValue ) { String value = StringUtils . trimToNull ( this . values . get ( pos ) ) ; return ( value != null ) ? value : defaultValue ; }", "nl": "Returns the value of the record at a certain index position ."}}