{"translation": {"code": "private static void deleteCellFromRow ( final Row row , final int cellNum ) { Cell cell = row . getCell ( cellNum ) ; if ( cell != null ) { row . removeCell ( cell ) ; } }", "nl": "Delete cell from row ."}}
{"translation": {"code": "public static void clearHiddenColumns ( final Sheet sheet ) { for ( Row row : sheet ) { if ( row . getLastCellNum ( ) > TieConstants . MAX_COLUMNS_IN_SHEET ) { deleteHiddenColumnsInRow ( row ) ; } } }", "nl": "Clear hidden columns ."}}
{"translation": {"code": "@ SuppressWarnings ( \"rawtypes\" ) private static CTShape getCtShapeFromVml ( final Cell sourceCell , XSSFVMLDrawing sourceVml ) throws ReflectiveOperationException { Method findshape ; // int parameter\r Class [ ] paramInt = new Class [ 2 ] ; paramInt [ 0 ] = Integer . TYPE ; paramInt [ 1 ] = Integer . TYPE ; findshape = sourceVml . getClass ( ) . getDeclaredMethod ( \"findCommentShape\" , paramInt ) ; findshape . setAccessible ( true ) ; return ( CTShape ) findshape . invoke ( sourceVml , sourceCell . getRowIndex ( ) , sourceCell . getColumnIndex ( ) ) ; }", "nl": "Find CtShape from vml object . This class use reflection to invoke the protected method in POI ."}}
{"translation": {"code": "private static XSSFVMLDrawing getVmlDrawingFromCell ( final Cell cell ) { XSSFSheet sourceSheet = ( XSSFSheet ) cell . getSheet ( ) ; for ( POIXMLDocumentPart sourcePart : sourceSheet . getRelations ( ) ) { if ( ( sourcePart != null ) && ( sourcePart instanceof XSSFVMLDrawing ) ) { return ( XSSFVMLDrawing ) sourcePart ; } } return null ; }", "nl": "Find vmldrawing part according to cell ."}}
{"translation": {"code": "private static void matchCommentSettings ( final Cell newCell , final Cell sourceCell ) { try { XSSFVMLDrawing sourceVml = getVmlDrawingFromCell ( sourceCell ) ; XSSFVMLDrawing targetVml = getVmlDrawingFromCell ( newCell ) ; CTShape sourceCtShape = getCtShapeFromVml ( sourceCell , sourceVml ) ; CTShape targetCtShape = getCtShapeFromVml ( newCell , targetVml ) ; targetCtShape . setType ( sourceCtShape . getType ( ) ) ; CTClientData sourceClientData = sourceCtShape . getClientDataArray ( 0 ) ; CTClientData targetClientData = targetCtShape . getClientDataArray ( 0 ) ; String [ ] anchorArray = sourceClientData . getAnchorList ( ) . get ( 0 ) . split ( \",\" ) ; int shiftRows = newCell . getRowIndex ( ) - sourceCell . getRowIndex ( ) ; /*\r\n\t\t\t * AchorArray mappings: 0->col1 1->dx1 2->row1 3->dy1 4->col2 5->dx2 6-> row2\r\n\t\t\t * 7->dy2\r\n\t\t\t */ anchorArray [ 2 ] = Integer . toString ( Integer . parseInt ( anchorArray [ 2 ] . trim ( ) ) + shiftRows ) ; anchorArray [ 6 ] = Integer . toString ( Integer . parseInt ( anchorArray [ 6 ] . trim ( ) ) + shiftRows ) ; targetClientData . getAnchorList ( ) . set ( 0 , FacesUtility . strJoin ( anchorArray , \",\" ) ) ; } catch ( Exception e ) { LOG . log ( Level . SEVERE , \"matchCommentSettings error = \" + e . getLocalizedMessage ( ) , e ) ; } }", "nl": "Use low level API to match the comments setting ."}}
{"translation": {"code": "public static FacesRow getFacesRowFromBodyRow ( final int row , final List < FacesRow > bodyRows , final int topRow ) { FacesRow frow = null ; try { frow = bodyRows . get ( row - topRow ) ; } catch ( Exception e ) { LOG . log ( Level . SEVERE , \"getFacesRowFromBodyRow Error row = \" + row + \"top row = \" + topRow + \" ; error = \" + e . getLocalizedMessage ( ) , e ) ; } return frow ; }", "nl": "Gets the faces row from body row ."}}
{"translation": {"code": "public static String getSkeyFromPoiCell ( final Cell poiCell ) { return poiCell . getSheet ( ) . getSheetName ( ) + \"!\" + CellUtility . getCellIndexNumberKey ( poiCell . getColumnIndex ( ) , poiCell . getRowIndex ( ) ) ; }", "nl": "Gets the skey from poi cell ."}}
{"translation": {"code": "public static TieCell getOrAddTieCellInMap ( final Cell poiCell , HashMap < String , TieCell > tieCells ) { String skey = CellUtility . getSkeyFromPoiCell ( poiCell ) ; TieCell tieCell = tieCells . get ( skey ) ; if ( tieCell == null ) { tieCell = new TieCell ( ) ; tieCell . setSkey ( skey ) ; tieCells . put ( skey , tieCell ) ; } return tieCell ; }", "nl": "Gets the or add tie cell in map ."}}
{"translation": {"code": "public String getDefaultDatePattern ( ) { if ( defaultDatePattern == null ) { DateFormat formatter = DateFormat . getDateInstance ( DateFormat . SHORT , Locale . getDefault ( ) ) ; defaultDatePattern = ( ( SimpleDateFormat ) formatter ) . toLocalizedPattern ( ) ; } return defaultDatePattern ; }", "nl": "Gets the default date pattern ."}}
{"translation": {"code": "public static int findFirstNonCellNamePosition ( String input , int startPosition ) { char c ; for ( int i = startPosition ; i < input . length ( ) ; i ++ ) { c = input . charAt ( i ) ; if ( c != ' ' && ! Character . isLetterOrDigit ( c ) ) { return i ; } } return - 1 ; // not found\r }", "nl": "find first non letterordigit position from string ."}}
{"translation": {"code": "public void setTieCommandAliasList ( String aliasListJson ) { Gson gson = new Gson ( ) ; Type aliasListType = new TypeToken < ArrayList < TieCommandAlias > > ( ) { } . getType ( ) ; this . tieCommandAliasList = gson . fromJson ( aliasListJson , aliasListType ) ; }", "nl": "Sets the tie command alias list ."}}
{"translation": {"code": "private static ClientAnchor createCommentAnchor ( final Cell newCell , CreationHelper factory ) { ClientAnchor anchor = factory . createClientAnchor ( ) ; anchor . setCol1 ( newCell . getColumnIndex ( ) ) ; anchor . setCol2 ( newCell . getColumnIndex ( ) + 1 ) ; anchor . setRow1 ( newCell . getRowIndex ( ) ) ; anchor . setRow2 ( newCell . getRowIndex ( ) + 3 ) ; return anchor ; }", "nl": "Creates the comment anchor ."}}
{"translation": {"code": "private void refreshDataForRow ( Row row ) { if ( row == null ) { return ; } String saveAttrList = SaveAttrsUtility . getSaveAttrListFromRow ( row ) ; if ( saveAttrList != null ) { String [ ] saveAttrs = saveAttrList . split ( \",\" ) ; for ( String fullSaveAttr : saveAttrs ) { refreshDataForCell ( row , fullSaveAttr ) ; } } }", "nl": "Refresh data for row ."}}
{"translation": {"code": "public void refreshData ( ) { if ( parent . getSerialDataContext ( ) . getDataContext ( ) == null ) { // no data objects available.\r return ; } for ( SheetConfiguration sheetConfig : parent . getSheetConfigMap ( ) . values ( ) ) { for ( int irow = sheetConfig . getFormCommand ( ) . getTopRow ( ) ; irow < sheetConfig . getFormCommand ( ) . getLastRow ( ) ; irow ++ ) { refreshDataForRow ( parent . getWb ( ) . getSheet ( sheetConfig . getSheetName ( ) ) . getRow ( irow ) ) ; } } parent . getCellHelper ( ) . reCalc ( ) ; }", "nl": "Refresh data ."}}
{"translation": {"code": "private static void buildCellCommentFromalias ( List < TieCommandAlias > tieCommandAliasList , Cell cell ) { String value = CellUtility . getCellValueWithoutFormat ( cell ) ; if ( ( value != null ) && ( ! value . isEmpty ( ) ) ) { for ( TieCommandAlias alias : tieCommandAliasList ) { Matcher matcher = alias . getPattern ( ) . matcher ( value ) ; if ( matcher . find ( ) ) { CellUtility . createOrInsertComment ( cell , alias . getCommand ( ) ) ; if ( alias . isRemove ( ) ) { CellUtility . setCellValue ( cell , ParserUtility . removeCharsFromString ( value , matcher . start ( ) , matcher . end ( ) ) ) ; } } } } }", "nl": "Builds the cell comment fromalias ."}}