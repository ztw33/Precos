{"translation": {"code": "public static Bitmap createIcon ( IconRow icon , float density , IconCache iconCache ) { Bitmap iconImage = null ; if ( icon != null ) { if ( iconCache != null ) { iconImage = iconCache . get ( icon . getId ( ) ) ; } if ( iconImage == null ) { BitmapFactory . Options options = icon . getDataBounds ( ) ; int dataWidth = options . outWidth ; int dataHeight = options . outHeight ; double styleWidth = dataWidth ; double styleHeight = dataHeight ; double widthDensity = DisplayMetrics . DENSITY_DEFAULT ; double heightDensity = DisplayMetrics . DENSITY_DEFAULT ; if ( icon . getWidth ( ) != null ) { styleWidth = icon . getWidth ( ) ; double widthRatio = dataWidth / styleWidth ; widthDensity *= widthRatio ; if ( icon . getHeight ( ) == null ) { heightDensity = widthDensity ; } } if ( icon . getHeight ( ) != null ) { styleHeight = icon . getHeight ( ) ; double heightRatio = dataHeight / styleHeight ; heightDensity *= heightRatio ; if ( icon . getWidth ( ) == null ) { widthDensity = heightDensity ; } } options = new BitmapFactory . Options ( ) ; options . inDensity = ( int ) ( Math . min ( widthDensity , heightDensity ) + 0.5f ) ; options . inTargetDensity = ( int ) ( DisplayMetrics . DENSITY_DEFAULT * density + 0.5f ) ; iconImage = icon . getDataBitmap ( options ) ; if ( widthDensity != heightDensity ) { int width = ( int ) ( styleWidth * density + 0.5f ) ; int height = ( int ) ( styleHeight * density + 0.5f ) ; if ( width != iconImage . getWidth ( ) || height != iconImage . getHeight ( ) ) { Bitmap scaledBitmap = Bitmap . createScaledBitmap ( iconImage , width , height , false ) ; iconImage . recycle ( ) ; iconImage = scaledBitmap ; } } if ( iconCache != null ) { iconCache . put ( icon . getId ( ) , iconImage ) ; } } } return iconImage ; }", "nl": "Create or retrieve from cache an icon bitmap for the icon row"}}
{"translation": {"code": "protected Paint getPolygonPaint ( FeatureStyle featureStyle ) { Paint paint = getFeatureStylePaint ( featureStyle , FeatureDrawType . STROKE ) ; if ( paint == null ) { paint = polygonPaint ; } return paint ; }", "nl": "Get the polygon paint for the feature style or return the default paint"}}
{"translation": {"code": "protected Paint getLinePaint ( FeatureStyle featureStyle ) { Paint paint = getFeatureStylePaint ( featureStyle , FeatureDrawType . STROKE ) ; if ( paint == null ) { paint = linePaint ; } return paint ; }", "nl": "Get the line paint for the feature style or return the default paint"}}
{"translation": {"code": "protected Paint getPointPaint ( FeatureStyle featureStyle ) { Paint paint = getFeatureStylePaint ( featureStyle , FeatureDrawType . CIRCLE ) ; if ( paint == null ) { paint = pointPaint ; } return paint ; }", "nl": "Get the point paint for the feature style or return the default paint"}}
{"translation": {"code": "private Paint getFeatureStylePaint ( FeatureStyle featureStyle , FeatureDrawType drawType ) { Paint paint = null ; if ( featureStyle != null ) { StyleRow style = featureStyle . getStyle ( ) ; if ( style != null && style . hasColor ( ) ) { paint = getStylePaint ( style , drawType ) ; } } return paint ; }", "nl": "Get the feature style paint from cache or create and cache it"}}
{"translation": {"code": "public List < Long > uniqueBaseIds ( ) { return querySingleColumnTypedResults ( \"SELECT DISTINCT \" + CoreSQLUtils . quoteWrap ( UserMappingTable . COLUMN_BASE_ID ) + \" FROM \" + CoreSQLUtils . quoteWrap ( getTableName ( ) ) , null ) ; }", "nl": "Get the unique base ids"}}
{"translation": {"code": "public void setData ( Bitmap bitmap , Bitmap . CompressFormat format , int quality ) throws IOException { setData ( BitmapConverter . toBytes ( bitmap , format , quality ) ) ; }", "nl": "Set the data from a bitmap"}}
{"translation": {"code": "public void setData ( Bitmap bitmap , Bitmap . CompressFormat format ) throws IOException { setData ( bitmap , format , 100 ) ; }", "nl": "Set the data from a full quality bitmap"}}
{"translation": {"code": "public List < Long > getAllStyleIds ( String featureTable ) { List < Long > styleIds = null ; StyleMappingDao mappingDao = getStyleMappingDao ( featureTable ) ; if ( mappingDao != null ) { styleIds = mappingDao . uniqueRelatedIds ( ) ; } return styleIds ; }", "nl": "Get all the unique style row ids the features map to"}}
{"translation": {"code": "public List < Long > getAllTableIconIds ( String featureTable ) { List < Long > iconIds = null ; StyleMappingDao mappingDao = getTableIconMappingDao ( featureTable ) ; if ( mappingDao != null ) { iconIds = mappingDao . uniqueRelatedIds ( ) ; } return iconIds ; }", "nl": "Get all the unique icon row ids the table maps to"}}
{"translation": {"code": "public List < Long > getAllTableStyleIds ( String featureTable ) { List < Long > styleIds = null ; StyleMappingDao mappingDao = getTableStyleMappingDao ( featureTable ) ; if ( mappingDao != null ) { styleIds = mappingDao . uniqueRelatedIds ( ) ; } return styleIds ; }", "nl": "Get all the unique style row ids the table maps to"}}
{"translation": {"code": "public Color getColorOrDefault ( ) { Color color = getColor ( ) ; if ( color == null ) { color = new Color ( ) ; } return color ; }", "nl": "Get the color or default value"}}
{"translation": {"code": "public Bitmap createBitmap ( ) { Bitmap bitmap = null ; Canvas canvas = null ; for ( int layer = 0 ; layer < 4 ; layer ++ ) { Bitmap layerBitmap = layeredBitmap [ layer ] ; if ( layerBitmap != null ) { if ( bitmap == null ) { bitmap = layerBitmap ; canvas = layeredCanvas [ layer ] ; } else { canvas . drawBitmap ( layerBitmap , new Matrix ( ) , null ) ; layerBitmap . recycle ( ) ; } layeredBitmap [ layer ] = null ; layeredCanvas [ layer ] = null ; } } return bitmap ; }", "nl": "Create the final bitmap from the layers resets the layers"}}
{"translation": {"code": "public Paint getPaint ( long styleId , FeatureDrawType type ) { Paint paint = null ; FeaturePaint featurePaint = getFeaturePaint ( styleId ) ; if ( featurePaint != null ) { paint = featurePaint . getPaint ( type ) ; } return paint ; }", "nl": "Get the paint for the style row id and draw type"}}
{"translation": {"code": "public FeatureIndexResults queryIndexedFeatures ( int x , int y , int zoom ) { // Get the web mercator bounding box BoundingBox webMercatorBoundingBox = TileBoundingBoxUtils . getWebMercatorBoundingBox ( x , y , zoom ) ; // Query for the geometries matching the bounds in the index return queryIndexedFeatures ( webMercatorBoundingBox ) ; }", "nl": "Query for feature results in the x y and zoom level by querying features in the tile location"}}
{"translation": {"code": "public FeatureCache getCache ( String tableName ) { FeatureCache cache = tableCache . get ( tableName ) ; if ( cache == null ) { cache = new FeatureCache ( maxCacheSize ) ; tableCache . put ( tableName , cache ) ; } return cache ; }", "nl": "Get or create a feature row cache for the table name"}}